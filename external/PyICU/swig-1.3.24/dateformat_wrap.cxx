/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif


/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)


/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_type_info **
SWIG_Python_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Python_GetTypeList() {
  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_icu__Locale swig_types[0] 
#define  SWIGTYPE_p_icu__UMemory swig_types[1] 
#define  SWIGTYPE_p_icu__ChoiceFormat swig_types[2] 
#define  SWIGTYPE_p_icu__MessageFormat swig_types[3] 
#define  SWIGTYPE_p_icu__MeasureFormat swig_types[4] 
#define  SWIGTYPE_p_icu__Format swig_types[5] 
#define  SWIGTYPE_p_icu__DateFormat swig_types[6] 
#define  SWIGTYPE_p_icu__SimpleDateFormat swig_types[7] 
#define  SWIGTYPE_p_UResType swig_types[8] 
#define  SWIGTYPE_p_ULocDataLocaleType swig_types[9] 
#define  SWIGTYPE_p_icu__ULocDataLocaleType swig_types[10] 
#define  SWIGTYPE_p_icu__DateFormatSymbols swig_types[11] 
#define  SWIGTYPE_p_char swig_types[12] 
#define  SWIGTYPE_p_icu__StringEnumeration swig_types[13] 
#define  SWIGTYPE_size_t swig_types[14] 
#define  SWIGTYPE_std__size_t swig_types[15] 
#define  SWIGTYPE_p_icu__Calendar swig_types[16] 
#define  SWIGTYPE_p_icu__GregorianCalendar swig_types[17] 
#define  SWIGTYPE_p_icu__Collator swig_types[18] 
#define  SWIGTYPE_p_icu__RuleBasedCollator swig_types[19] 
#define  SWIGTYPE_p_icu__UObject swig_types[20] 
#define  SWIGTYPE_ptrdiff_t swig_types[21] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[22] 
#define  SWIGTYPE_p__UnicodeString swig_types[23] 
#define  SWIGTYPE_p_icu__UnicodeString swig_types[24] 
#define  SWIGTYPE_p_icu__RuleBasedNumberFormat swig_types[25] 
#define  SWIGTYPE_p_icu__DecimalFormat swig_types[26] 
#define  SWIGTYPE_p_icu__NumberFormat swig_types[27] 
#define  SWIGTYPE_p__int32_t swig_types[28] 
#define  SWIGTYPE_p_icu__TimeZone swig_types[29] 
#define  SWIGTYPE_p_icu__SimpleTimeZone swig_types[30] 
#define  SWIGTYPE_p_icu__Formattable swig_types[31] 
#define  SWIGTYPE_p_UErrorCode swig_types[32] 
#define  SWIGTYPE_p_LeakyUnicodeStringArray3 swig_types[33] 
#define  SWIGTYPE_p_icu__FieldPosition swig_types[34] 
#define  SWIGTYPE_p_icu__ParsePosition swig_types[35] 
static swig_type_info *swig_types[37];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _PyICU_dateformat.so
  ------------------------------------------------*/
#define SWIG_init    init_PyICU_dateformat

#define SWIG_name    "_PyICU_dateformat"


#include "common.h"




#include "common.h"



  /*@/usr/local/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNSHORT int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

static icu::Locale const icu_DateFormatSymbols_getLocale__SWIG_0(icu::DateFormatSymbols *self,ULocDataLocaleType type=ULOC_VALID_LOCALE){
                UErrorCode status = U_ZERO_ERROR;
                Locale locale = self->getLocale(type, status);

                if (U_FAILURE(status))
                    throw ICUException(status);

                return locale;
            }
static PyObject *icu_SimpleDateFormat___repr__(icu::SimpleDateFormat *self){
                UnicodeString u; self->toPattern(u);
                PyObject *string = PyUnicode_FromUnicodeString(&u);
                PyObject *format = PyString_FromString("<SimpleDateFormat: %s>");
                PyObject *tuple = PyTuple_New(1);
                PyObject *repr;

                PyTuple_SET_ITEM(tuple, 0, string);
                repr = PyString_Format(format, tuple);
                Py_DECREF(format);
                Py_DECREF(tuple);

                return repr;
            }
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_DateFormatSymbols__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    UErrorCode arg1 ;
    icu::DateFormatSymbols *result;
    
    {
        arg1 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)":new_DateFormatSymbols")) goto fail;
    {
        try {
            result = (icu::DateFormatSymbols *)new icu::DateFormatSymbols(arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__DateFormatSymbols, 1);
    {
        if (U_FAILURE(arg1))
        return ICUException(arg1).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateFormatSymbols__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::Locale *arg1 = 0 ;
    UErrorCode arg2 ;
    icu::DateFormatSymbols *result;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateFormatSymbols",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (icu::DateFormatSymbols *)new icu::DateFormatSymbols(*arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__DateFormatSymbols, 1);
    {
        if (U_FAILURE(arg2))
        return ICUException(arg2).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateFormatSymbols__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    UErrorCode arg2 ;
    icu::DateFormatSymbols *result;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateFormatSymbols",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        try {
            result = (icu::DateFormatSymbols *)new icu::DateFormatSymbols(arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__DateFormatSymbols, 1);
    {
        if (U_FAILURE(arg2))
        return ICUException(arg2).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateFormatSymbols__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::Locale *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    UErrorCode arg3 ;
    icu::DateFormatSymbols *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DateFormatSymbols",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            result = (icu::DateFormatSymbols *)new icu::DateFormatSymbols(*arg1,arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__DateFormatSymbols, 1);
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateFormatSymbols(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DateFormatSymbols__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DateFormatSymbols__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_DateFormatSymbols__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_new_DateFormatSymbols__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DateFormatSymbols'");
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    icu::DateFormatSymbols *arg2 = 0 ;
    UBool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::DateFormatSymbols");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->operator ==(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyBool_FromLong((long) result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    icu::DateFormatSymbols *arg2 = 0 ;
    UBool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::DateFormatSymbols");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->operator !=(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyBool_FromLong((long) result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getEras(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getEras",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getEras(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setEras(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    LeakyUnicodeStringArray3 arg2 ;
    _int32_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setEras",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int len = PyList_Size(obj1);
        UnicodeString *strings = new UnicodeString[len]; //leaked
        arg3 = len;
        for (int i = 0; i < len; i++)
        PyObject_AsUnicodeString(PyList_GET_ITEM(obj1, i), strings[i]);
        arg2 = (const UnicodeString *) strings;
    }
    {
        try {
            (arg1)->setEras(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getMonths__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getMonths",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getMonths(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getMonths__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    icu::DateFormatSymbols::DtContextType arg3 ;
    icu::DateFormatSymbols::DtWidthType arg4 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormatSymbols_getMonths",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg3 = (icu::DateFormatSymbols::DtContextType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (icu::DateFormatSymbols::DtWidthType)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->getMonths(arg2,(icu::DateFormatSymbols::DtContextType )arg3,(icu::DateFormatSymbols::DtWidthType )arg4);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getMonths(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateFormatSymbols_getMonths__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DateFormatSymbols_getMonths__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormatSymbols_getMonths'");
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setMonths(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    LeakyUnicodeStringArray3 arg2 ;
    _int32_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setMonths",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int len = PyList_Size(obj1);
        UnicodeString *strings = new UnicodeString[len]; //leaked
        arg3 = len;
        for (int i = 0; i < len; i++)
        PyObject_AsUnicodeString(PyList_GET_ITEM(obj1, i), strings[i]);
        arg2 = (const UnicodeString *) strings;
    }
    {
        try {
            (arg1)->setMonths(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getShortMonths(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getShortMonths",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getShortMonths(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setShortMonths(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    LeakyUnicodeStringArray3 arg2 ;
    _int32_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setShortMonths",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int len = PyList_Size(obj1);
        UnicodeString *strings = new UnicodeString[len]; //leaked
        arg3 = len;
        for (int i = 0; i < len; i++)
        PyObject_AsUnicodeString(PyList_GET_ITEM(obj1, i), strings[i]);
        arg2 = (const UnicodeString *) strings;
    }
    {
        try {
            (arg1)->setShortMonths(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getWeekdays__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getWeekdays",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getWeekdays(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getWeekdays__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    icu::DateFormatSymbols::DtContextType arg3 ;
    icu::DateFormatSymbols::DtWidthType arg4 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormatSymbols_getWeekdays",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg3 = (icu::DateFormatSymbols::DtContextType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (icu::DateFormatSymbols::DtWidthType)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->getWeekdays(arg2,(icu::DateFormatSymbols::DtContextType )arg3,(icu::DateFormatSymbols::DtWidthType )arg4);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getWeekdays(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateFormatSymbols_getWeekdays__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DateFormatSymbols_getWeekdays__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormatSymbols_getWeekdays'");
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setWeekdays(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    LeakyUnicodeStringArray3 arg2 ;
    _int32_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setWeekdays",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int len = PyList_Size(obj1);
        UnicodeString *strings = new UnicodeString[len]; //leaked
        arg3 = len;
        for (int i = 0; i < len; i++)
        PyObject_AsUnicodeString(PyList_GET_ITEM(obj1, i), strings[i]);
        arg2 = (const UnicodeString *) strings;
    }
    {
        try {
            (arg1)->setWeekdays(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getShortWeekdays(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getShortWeekdays",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getShortWeekdays(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setShortWeekdays(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    LeakyUnicodeStringArray3 arg2 ;
    _int32_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setShortWeekdays",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int len = PyList_Size(obj1);
        UnicodeString *strings = new UnicodeString[len]; //leaked
        arg3 = len;
        for (int i = 0; i < len; i++)
        PyObject_AsUnicodeString(PyList_GET_ITEM(obj1, i), strings[i]);
        arg2 = (const UnicodeString *) strings;
    }
    {
        try {
            (arg1)->setShortWeekdays(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getAmPmStrings(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _int32_t arg2 ;
    UnicodeStringArray2 result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getAmPmStrings",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getAmPmStrings(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyList_New(arg2);
        for (int32_t i = 0; i < arg2; i++) {
            UnicodeString *string = (UnicodeString *) result + i;
            PyObject *o = SWIG_NewPointerObj(string, SWIGTYPE_p_icu__UnicodeString, 0);
            PyList_SET_ITEM(resultobj, i, o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setAmPmStrings(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    LeakyUnicodeStringArray3 arg2 ;
    _int32_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setAmPmStrings",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int len = PyList_Size(obj1);
        UnicodeString *strings = new UnicodeString[len]; //leaked
        arg3 = len;
        for (int i = 0; i < len; i++)
        PyObject_AsUnicodeString(PyList_GET_ITEM(obj1, i), strings[i]);
        arg2 = (const UnicodeString *) strings;
    }
    {
        try {
            (arg1)->setAmPmStrings(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getLocalPatternChars__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    UnicodeString1 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_getLocalPatternChars",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString1 &_result_ref = (arg1)->getLocalPatternChars(*arg2);
                result = (UnicodeString1 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj1);
        resultobj = obj1;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getLocalPatternChars__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _UnicodeString arg2 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getLocalPatternChars",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->getLocalPatternChars(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getLocalPatternChars(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateFormatSymbols_getLocalPatternChars__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormatSymbols_getLocalPatternChars__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormatSymbols_getLocalPatternChars'");
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setLocalPatternChars__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setLocalPatternChars",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->setLocalPatternChars(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setLocalPatternChars__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    _PyString arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_setLocalPatternChars",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            PyObject_AsUnicodeString(obj1, arg2);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        try {
            (arg1)->setLocalPatternChars(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_setLocalPatternChars(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormatSymbols_setLocalPatternChars__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = argv[1] != Py_None;
            }
            if (_v) {
                return _wrap_DateFormatSymbols_setLocalPatternChars__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormatSymbols_setLocalPatternChars'");
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getLocale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    ULocDataLocaleType arg2 ;
    icu::Locale result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormatSymbols_getLocale",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        ULocDataLocaleType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_ULocDataLocaleType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("ULocDataLocaleType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = icu_DateFormatSymbols_getLocale__SWIG_0(arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::Locale * resultptr;
        resultptr = new icu::Locale((icu::Locale const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__Locale, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getLocale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormatSymbols *arg1 = (icu::DateFormatSymbols *) 0 ;
    icu::Locale result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormatSymbols_getLocale",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = icu_DateFormatSymbols_getLocale__SWIG_0(arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::Locale * resultptr;
        resultptr = new icu::Locale((icu::Locale const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__Locale, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormatSymbols_getLocale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateFormatSymbols_getLocale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_ULocDataLocaleType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormatSymbols_getLocale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormatSymbols_getLocale'");
    return NULL;
}


static PyObject * DateFormatSymbols_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_icu__DateFormatSymbols, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_DateFormat_isLenient(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    UBool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_isLenient",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->isLenient();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyBool_FromLong((long) result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_setLenient(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    UBool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_setLenient",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = obj1 == Py_True;
    }
    {
        try {
            (arg1)->setLenient(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::Formattable *arg2 = 0 ;
    icu::UnicodeString *arg3 = 0 ;
    UErrorCode arg4 ;
    UnicodeString2 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    {
        arg4 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_format",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Formattable, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Formattable");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString2 &_result_ref = (arg1)->format(*arg2,*arg3,arg4);
                result = (UnicodeString2 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj2);
        resultobj = obj2;
    }
    {
        if (U_FAILURE(arg4))
        return ICUException(arg4).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::Formattable *arg2 = 0 ;
    icu::UnicodeString *arg3 = 0 ;
    icu::FieldPosition *arg4 = 0 ;
    UErrorCode arg5 ;
    UnicodeString2 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    {
        arg5 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DateFormat_format",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Formattable, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Formattable");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_icu__FieldPosition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("icu::FieldPosition");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString2 &_result_ref = (arg1)->format(*arg2,*arg3,*arg4,arg5);
                result = (UnicodeString2 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj2);
        resultobj = obj2;
    }
    {
        if (U_FAILURE(arg5))
        return ICUException(arg5).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::Formattable *arg2 = 0 ;
    _UnicodeString arg3 ;
    UErrorCode arg4 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    {
        arg4 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_format",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Formattable, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Formattable");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->format(*arg2,arg3,arg4);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    {
        if (U_FAILURE(arg4))
        return ICUException(arg4).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::Formattable *arg2 = 0 ;
    _UnicodeString arg3 ;
    icu::FieldPosition *arg4 = 0 ;
    UErrorCode arg5 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    {
        
    }
    {
        arg5 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_format",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Formattable, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Formattable");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg4, SWIGTYPE_p_icu__FieldPosition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("icu::FieldPosition");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->format(*arg2,arg3,*arg4,arg5);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    {
        if (U_FAILURE(arg5))
        return ICUException(arg5).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    UDate arg2 ;
    icu::UnicodeString *arg3 = 0 ;
    UnicodeString2 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_format",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyObject_AsUDate(obj1);
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString2 &_result_ref = (arg1)->format(arg2,*arg3);
                result = (UnicodeString2 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj2);
        resultobj = obj2;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    UDate arg2 ;
    icu::UnicodeString *arg3 = 0 ;
    icu::FieldPosition *arg4 = 0 ;
    UnicodeString2 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DateFormat_format",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyObject_AsUDate(obj1);
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_icu__FieldPosition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("icu::FieldPosition");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString2 &_result_ref = (arg1)->format(arg2,*arg3,*arg4);
                result = (UnicodeString2 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj2);
        resultobj = obj2;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    UDate arg2 ;
    _UnicodeString arg3 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_format",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyObject_AsUDate(obj1);
    }
    {
        try {
            result = (arg1)->format(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    UDate arg2 ;
    _UnicodeString arg3 ;
    icu::FieldPosition *arg4 = 0 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_format",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyObject_AsUDate(obj1);
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg4, SWIGTYPE_p_icu__FieldPosition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("icu::FieldPosition");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->format(arg2,arg3,*arg4);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_format(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Formattable, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormat_format__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_CheckExact(argv[1]) ||
                PyObject_HasAttrString(argv[1], "timetuple"));
            }
            if (_v) {
                return _wrap_DateFormat_format__SWIG_6(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Formattable, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__FieldPosition, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_format__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Formattable, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_format__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_CheckExact(argv[1]) ||
                PyObject_HasAttrString(argv[1], "timetuple"));
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_format__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_CheckExact(argv[1]) ||
                PyObject_HasAttrString(argv[1], "timetuple"));
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__FieldPosition, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_format__SWIG_7(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Formattable, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_icu__FieldPosition, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_DateFormat_format__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_CheckExact(argv[1]) ||
                PyObject_HasAttrString(argv[1], "timetuple"));
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_icu__FieldPosition, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_DateFormat_format__SWIG_5(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormat_format'");
    return NULL;
}


static PyObject *_wrap_DateFormat_parse__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    UErrorCode arg3 ;
    UDate result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_parse",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->parse(*arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyFloat_FromDouble((double) result / 1000.0);
    }
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_parse__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    icu::ParsePosition *arg3 = 0 ;
    UDate result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_parse",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_icu__ParsePosition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("icu::ParsePosition");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->parse(*arg2,*arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyFloat_FromDouble((double) result / 1000.0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_parse__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    _PyString arg2 ;
    UErrorCode arg3 ;
    UDate result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_parse",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            PyObject_AsUnicodeString(obj1, arg2);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        try {
            result = (arg1)->parse(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyFloat_FromDouble((double) result / 1000.0);
    }
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_parse__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    _PyString arg2 ;
    icu::ParsePosition *arg3 = 0 ;
    UDate result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_parse",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            PyObject_AsUnicodeString(obj1, arg2);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_icu__ParsePosition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("icu::ParsePosition");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->parse(arg2,*arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyFloat_FromDouble((double) result / 1000.0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_parse(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormat_parse__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = argv[1] != Py_None;
            }
            if (_v) {
                return _wrap_DateFormat_parse__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__ParsePosition, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_parse__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__DateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = argv[1] != Py_None;
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__ParsePosition, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_parse__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormat_parse'");
    return NULL;
}


static PyObject *_wrap_DateFormat_getCalendar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::Calendar *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_getCalendar",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (icu::Calendar *)(arg1)->getCalendar();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__Calendar, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_setCalendar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::Calendar *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_setCalendar",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Calendar, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Calendar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->setCalendar(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_getNumberFormat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::NumberFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_getNumberFormat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (icu::NumberFormat *)(arg1)->getNumberFormat();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__NumberFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_setNumberFormat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::NumberFormat *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_setNumberFormat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__NumberFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::NumberFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->setNumberFormat(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_getTimeZone(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    cloned_TimeZone *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_getTimeZone",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                cloned_TimeZone &_result_ref = (arg1)->getTimeZone();
                result = (cloned_TimeZone *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleTimeZone::getStaticClassID())
        resultobj = SWIG_NewPointerObj((void *) result->clone(), SWIGTYPE_p_icu__SimpleTimeZone, 1);
        else
        resultobj = SWIG_NewPointerObj((void *) result->clone(), SWIGTYPE_p_icu__TimeZone, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_setTimeZone(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat *arg1 = (icu::DateFormat *) 0 ;
    icu::TimeZone *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_setTimeZone",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__DateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__TimeZone, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::TimeZone");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->setTimeZone(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createInstance(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _DateFormat *result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateFormat_createInstance")) goto fail;
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createInstance();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createTimeInstance__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    icu::Locale arg2 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_createTimeInstance",&obj0,&obj1)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        icu::Locale * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createTimeInstance((icu::DateFormat::EStyle )arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createTimeInstance__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_createTimeInstance",&obj0)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createTimeInstance((icu::DateFormat::EStyle )arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createTimeInstance__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _DateFormat *result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateFormat_createTimeInstance")) goto fail;
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createTimeInstance();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createTimeInstance(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_DateFormat_createTimeInstance__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_DateFormat_createTimeInstance__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormat_createTimeInstance__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormat_createTimeInstance'");
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateInstance__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    icu::Locale arg2 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_createDateInstance",&obj0,&obj1)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        icu::Locale * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateInstance((icu::DateFormat::EStyle )arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateInstance__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_createDateInstance",&obj0)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateInstance((icu::DateFormat::EStyle )arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateInstance__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _DateFormat *result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateFormat_createDateInstance")) goto fail;
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateInstance();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateInstance(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_DateFormat_createDateInstance__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_DateFormat_createDateInstance__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateFormat_createDateInstance__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormat_createDateInstance'");
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateTimeInstance__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    icu::DateFormat::EStyle arg2 ;
    icu::Locale arg3 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DateFormat_createDateTimeInstance",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (icu::DateFormat::EStyle)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        icu::Locale * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateTimeInstance((icu::DateFormat::EStyle )arg1,(icu::DateFormat::EStyle )arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateTimeInstance__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    icu::DateFormat::EStyle arg2 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateFormat_createDateTimeInstance",&obj0,&obj1)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (icu::DateFormat::EStyle)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateTimeInstance((icu::DateFormat::EStyle )arg1,(icu::DateFormat::EStyle )arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateTimeInstance__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::DateFormat::EStyle arg1 ;
    _DateFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateFormat_createDateTimeInstance",&obj0)) goto fail;
    {
        arg1 = (icu::DateFormat::EStyle)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateTimeInstance((icu::DateFormat::EStyle )arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateTimeInstance__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _DateFormat *result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateFormat_createDateTimeInstance")) goto fail;
    {
        try {
            result = (_DateFormat *)icu::DateFormat::createDateTimeInstance();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        if (result->getDynamicClassID() == icu::SimpleDateFormat::getStaticClassID())
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__SimpleDateFormat, 1);
        else
        resultobj = SWIG_NewPointerObj(result, SWIGTYPE_p_icu__DateFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateFormat_createDateTimeInstance(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_DateFormat_createDateTimeInstance__SWIG_3(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_DateFormat_createDateTimeInstance__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_DateFormat_createDateTimeInstance__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DateFormat_createDateTimeInstance__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateFormat_createDateTimeInstance'");
    return NULL;
}


static PyObject *_wrap_DateFormat_getAvailableLocales(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _int32_t arg1 ;
    LocaleDict1 result;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)":DateFormat_getAvailableLocales")) goto fail;
    {
        try {
            result = icu::DateFormat::getAvailableLocales(arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyDict_New();
        for (int32_t i = 0; i < arg1; i++) {
            Locale *locale = (Locale *) result + i;
            PyObject *o = SWIG_NewPointerObj(locale, SWIGTYPE_p_icu__Locale, 0);
            PyDict_SetItemString(resultobj, locale->getName(), o);
            Py_DECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DateFormat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_icu__DateFormat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SimpleDateFormat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    UErrorCode arg1 ;
    icu::SimpleDateFormat *result;
    
    {
        arg1 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)":new_SimpleDateFormat")) goto fail;
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg1))
        return ICUException(arg1).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::UnicodeString *arg1 = 0 ;
    UErrorCode arg2 ;
    icu::SimpleDateFormat *result;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:new_SimpleDateFormat",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(*arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg2))
        return ICUException(arg2).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::UnicodeString *arg1 = 0 ;
    icu::Locale *arg2 = 0 ;
    UErrorCode arg3 ;
    icu::SimpleDateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SimpleDateFormat",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(*arg1,*arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::UnicodeString *arg1 = 0 ;
    icu::DateFormatSymbols *arg2 = 0 ;
    UErrorCode arg3 ;
    icu::SimpleDateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SimpleDateFormat",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::DateFormatSymbols");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(*arg1,*arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _PyString arg1 ;
    UErrorCode arg2 ;
    icu::SimpleDateFormat *result;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:new_SimpleDateFormat",&obj0)) goto fail;
    {
        try {
            PyObject_AsUnicodeString(obj0, arg1);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(arg1,arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg2))
        return ICUException(arg2).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _PyString arg1 ;
    icu::Locale *arg2 = 0 ;
    UErrorCode arg3 ;
    icu::SimpleDateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SimpleDateFormat",&obj0,&obj1)) goto fail;
    {
        try {
            PyObject_AsUnicodeString(obj0, arg1);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__Locale, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::Locale");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(arg1,*arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    _PyString arg1 ;
    icu::DateFormatSymbols *arg2 = 0 ;
    UErrorCode arg3 ;
    icu::SimpleDateFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SimpleDateFormat",&obj0,&obj1)) goto fail;
    {
        try {
            PyObject_AsUnicodeString(obj0, arg1);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::DateFormatSymbols");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (icu::SimpleDateFormat *)new icu::SimpleDateFormat(arg1,*arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__SimpleDateFormat, 1);
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleDateFormat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SimpleDateFormat__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SimpleDateFormat__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = argv[0] != Py_None;
        }
        if (_v) {
            return _wrap_new_SimpleDateFormat__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_SimpleDateFormat__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_SimpleDateFormat__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = argv[0] != Py_None;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__Locale, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_SimpleDateFormat__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = argv[0] != Py_None;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__DateFormatSymbols, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_SimpleDateFormat__SWIG_6(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SimpleDateFormat'");
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_toPattern__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    UnicodeString1 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_toPattern",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString1 &_result_ref = (arg1)->toPattern(*arg2);
                result = (UnicodeString1 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj1);
        resultobj = obj1;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_toPattern__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    _UnicodeString arg2 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleDateFormat_toPattern",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->toPattern(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_toPattern(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_SimpleDateFormat_toPattern__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_SimpleDateFormat_toPattern__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SimpleDateFormat_toPattern'");
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_toLocalizedPattern__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    UErrorCode arg3 ;
    UnicodeString1 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_toLocalizedPattern",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                UnicodeString1 &_result_ref = (arg1)->toLocalizedPattern(*arg2,arg3);
                result = (UnicodeString1 *) &_result_ref;
            }
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        Py_INCREF(obj1);
        resultobj = obj1;
    }
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_toLocalizedPattern__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    _UnicodeString arg2 ;
    UErrorCode arg3 ;
    icu::UnicodeString result;
    PyObject * obj0 = 0 ;
    
    {
        
    }
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleDateFormat_toLocalizedPattern",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->toLocalizedPattern(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        icu::UnicodeString * resultptr;
        resultptr = new icu::UnicodeString((icu::UnicodeString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_icu__UnicodeString, 1);
    }
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_toLocalizedPattern(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_SimpleDateFormat_toLocalizedPattern__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_SimpleDateFormat_toLocalizedPattern__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SimpleDateFormat_toLocalizedPattern'");
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_applyPattern__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_applyPattern",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->applyPattern(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_applyPattern__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    _PyString arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_applyPattern",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            PyObject_AsUnicodeString(obj1, arg2);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        try {
            (arg1)->applyPattern(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_applyPattern(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_SimpleDateFormat_applyPattern__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = argv[1] != Py_None;
            }
            if (_v) {
                return _wrap_SimpleDateFormat_applyPattern__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SimpleDateFormat_applyPattern'");
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_applyLocalizedPattern__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    icu::UnicodeString *arg2 = 0 ;
    UErrorCode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_applyLocalizedPattern",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__UnicodeString, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::UnicodeString");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->applyLocalizedPattern(*arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_applyLocalizedPattern__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    _PyString arg2 ;
    UErrorCode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_applyLocalizedPattern",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            PyObject_AsUnicodeString(obj1, arg2);
        } catch (ICUException e) {
            e.reportError();
            SWIG_fail;
        }
    }
    {
        try {
            (arg1)->applyLocalizedPattern(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_applyLocalizedPattern(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_icu__UnicodeString, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_SimpleDateFormat_applyLocalizedPattern__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_icu__SimpleDateFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = argv[1] != Py_None;
            }
            if (_v) {
                return _wrap_SimpleDateFormat_applyLocalizedPattern__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SimpleDateFormat_applyLocalizedPattern'");
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_set2DigitYearStart(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    UDate arg2 ;
    UErrorCode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        arg3 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_set2DigitYearStart",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyObject_AsUDate(obj1);
    }
    {
        try {
            (arg1)->set2DigitYearStart(arg2,arg3);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (U_FAILURE(arg3))
        return ICUException(arg3).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_get2DigitYearStart(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    UErrorCode arg2 ;
    UDate result;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = U_ZERO_ERROR;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleDateFormat_get2DigitYearStart",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->get2DigitYearStart(arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = PyFloat_FromDouble((double) result / 1000.0);
    }
    {
        if (U_FAILURE(arg2))
        return ICUException(arg2).reportError();
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_getDateFormatSymbols(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    icu::DateFormatSymbols *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleDateFormat_getDateFormatSymbols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (icu::DateFormatSymbols *)(arg1)->getDateFormatSymbols();
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_icu__DateFormatSymbols, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat_setDateFormatSymbols(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    icu::DateFormatSymbols *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleDateFormat_setDateFormatSymbols",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_icu__DateFormatSymbols, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("icu::DateFormatSymbols");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->setDateFormatSymbols(*arg2);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleDateFormat___repr__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    icu::SimpleDateFormat *arg1 = (icu::SimpleDateFormat *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleDateFormat___repr__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_icu__SimpleDateFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)icu_SimpleDateFormat___repr__(arg1);
            
        } catch (ICUException e) {
            return e.reportError();
        }
    }
    {
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SimpleDateFormat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_icu__SimpleDateFormat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_DateFormatSymbols", _wrap_new_DateFormatSymbols, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols___eq__", _wrap_DateFormatSymbols___eq__, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols___ne__", _wrap_DateFormatSymbols___ne__, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getEras", _wrap_DateFormatSymbols_getEras, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setEras", _wrap_DateFormatSymbols_setEras, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getMonths", _wrap_DateFormatSymbols_getMonths, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setMonths", _wrap_DateFormatSymbols_setMonths, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getShortMonths", _wrap_DateFormatSymbols_getShortMonths, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setShortMonths", _wrap_DateFormatSymbols_setShortMonths, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getWeekdays", _wrap_DateFormatSymbols_getWeekdays, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setWeekdays", _wrap_DateFormatSymbols_setWeekdays, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getShortWeekdays", _wrap_DateFormatSymbols_getShortWeekdays, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setShortWeekdays", _wrap_DateFormatSymbols_setShortWeekdays, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getAmPmStrings", _wrap_DateFormatSymbols_getAmPmStrings, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setAmPmStrings", _wrap_DateFormatSymbols_setAmPmStrings, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getLocalPatternChars", _wrap_DateFormatSymbols_getLocalPatternChars, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_setLocalPatternChars", _wrap_DateFormatSymbols_setLocalPatternChars, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_getLocale", _wrap_DateFormatSymbols_getLocale, METH_VARARGS, NULL},
	 { (char *)"DateFormatSymbols_swigregister", DateFormatSymbols_swigregister, METH_VARARGS, NULL},
	 { (char *)"DateFormat_isLenient", _wrap_DateFormat_isLenient, METH_VARARGS, NULL},
	 { (char *)"DateFormat_setLenient", _wrap_DateFormat_setLenient, METH_VARARGS, NULL},
	 { (char *)"DateFormat_format", _wrap_DateFormat_format, METH_VARARGS, NULL},
	 { (char *)"DateFormat_parse", _wrap_DateFormat_parse, METH_VARARGS, NULL},
	 { (char *)"DateFormat_getCalendar", _wrap_DateFormat_getCalendar, METH_VARARGS, NULL},
	 { (char *)"DateFormat_setCalendar", _wrap_DateFormat_setCalendar, METH_VARARGS, NULL},
	 { (char *)"DateFormat_getNumberFormat", _wrap_DateFormat_getNumberFormat, METH_VARARGS, NULL},
	 { (char *)"DateFormat_setNumberFormat", _wrap_DateFormat_setNumberFormat, METH_VARARGS, NULL},
	 { (char *)"DateFormat_getTimeZone", _wrap_DateFormat_getTimeZone, METH_VARARGS, NULL},
	 { (char *)"DateFormat_setTimeZone", _wrap_DateFormat_setTimeZone, METH_VARARGS, NULL},
	 { (char *)"DateFormat_createInstance", _wrap_DateFormat_createInstance, METH_VARARGS, NULL},
	 { (char *)"DateFormat_createTimeInstance", _wrap_DateFormat_createTimeInstance, METH_VARARGS, NULL},
	 { (char *)"DateFormat_createDateInstance", _wrap_DateFormat_createDateInstance, METH_VARARGS, NULL},
	 { (char *)"DateFormat_createDateTimeInstance", _wrap_DateFormat_createDateTimeInstance, METH_VARARGS, NULL},
	 { (char *)"DateFormat_getAvailableLocales", _wrap_DateFormat_getAvailableLocales, METH_VARARGS, NULL},
	 { (char *)"DateFormat_swigregister", DateFormat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SimpleDateFormat", _wrap_new_SimpleDateFormat, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_toPattern", _wrap_SimpleDateFormat_toPattern, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_toLocalizedPattern", _wrap_SimpleDateFormat_toLocalizedPattern, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_applyPattern", _wrap_SimpleDateFormat_applyPattern, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_applyLocalizedPattern", _wrap_SimpleDateFormat_applyLocalizedPattern, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_set2DigitYearStart", _wrap_SimpleDateFormat_set2DigitYearStart, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_get2DigitYearStart", _wrap_SimpleDateFormat_get2DigitYearStart, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_getDateFormatSymbols", _wrap_SimpleDateFormat_getDateFormatSymbols, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_setDateFormatSymbols", _wrap_SimpleDateFormat_setDateFormatSymbols, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat___repr__", _wrap_SimpleDateFormat___repr__, METH_VARARGS, NULL},
	 { (char *)"SimpleDateFormat_swigregister", SimpleDateFormat_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_icu__MeasureTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::Measure *) x));
}
static void *_p_icu__ChoiceFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *)(icu::NumberFormat *) ((icu::ChoiceFormat *) x));
}
static void *_p_icu__MessageFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *) ((icu::MessageFormat *) x));
}
static void *_p_icu__MeasureFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *) ((icu::MeasureFormat *) x));
}
static void *_p_icu__DateFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *) ((icu::DateFormat *) x));
}
static void *_p_icu__SimpleDateFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *)(icu::DateFormat *) ((icu::SimpleDateFormat *) x));
}
static void *_p_icu__DecimalFormatSymbolsTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::DecimalFormatSymbols *) x));
}
static void *_p_icu__DateFormatSymbolsTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::DateFormatSymbols *) x));
}
static void *_p_icu__StringEnumerationTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::StringEnumeration *) x));
}
static void *_p_icu__ReplaceableTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::Replaceable *) x));
}
static void *_p_icu__CurrencyAmountTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Measure *) ((icu::CurrencyAmount *) x));
}
static void *_p_icu__ForwardCharacterIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::ForwardCharacterIterator *) x));
}
static void *_p_icu__CharacterIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::ForwardCharacterIterator *) ((icu::CharacterIterator *) x));
}
static void *_p_icu__UCharCharacterIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::ForwardCharacterIterator *)(icu::CharacterIterator *) ((icu::UCharCharacterIterator *) x));
}
static void *_p_icu__StringCharacterIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::ForwardCharacterIterator *)(icu::CharacterIterator *) ((icu::StringCharacterIterator *) x));
}
static void *_p_icu__BreakIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::BreakIterator *) x));
}
static void *_p_icu__RuleBasedBreakIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::BreakIterator *) ((icu::RuleBasedBreakIterator *) x));
}
static void *_p_icu__DictionaryBasedBreakIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::BreakIterator *)(icu::RuleBasedBreakIterator *) ((icu::DictionaryBasedBreakIterator *) x));
}
static void *_p_icu__CanonicalIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::CanonicalIterator *) x));
}
static void *_p_icu__CollationElementIteratorTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::CollationElementIterator *) x));
}
static void *_p_icu__GregorianCalendarTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Calendar *) ((icu::GregorianCalendar *) x));
}
static void *_p_icu__CalendarTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::Calendar *) x));
}
static void *_p_icu__UObjectTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *)  ((icu::UObject *) x));
}
static void *_p_icu__LocaleTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::Locale *) x));
}
static void *_p_icu__UnicodeStringTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Replaceable *) ((icu::UnicodeString *) x));
}
static void *_p_icu__RuleBasedNumberFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *)(icu::NumberFormat *) ((icu::RuleBasedNumberFormat *) x));
}
static void *_p_icu__DecimalFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *)(icu::NumberFormat *) ((icu::DecimalFormat *) x));
}
static void *_p_icu__NumberFormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::Format *) ((icu::NumberFormat *) x));
}
static void *_p_icu__FormatTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::Format *) x));
}
static void *_p_icu__ResourceBundleTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::ResourceBundle *) x));
}
static void *_p_icu__MeasureUnitTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::MeasureUnit *) x));
}
static void *_p_icu__SimpleTimeZoneTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::TimeZone *) ((icu::SimpleTimeZone *) x));
}
static void *_p_icu__TimeZoneTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::TimeZone *) x));
}
static void *_p_icu__FormattableTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::Formattable *) x));
}
static void *_p_icu__ParsePositionTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::ParsePosition *) x));
}
static void *_p_icu__FieldPositionTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *) ((icu::FieldPosition *) x));
}
static void *_p_icu__CurrencyUnitTo_p_icu__UMemory(void *x) {
    return (void *)((icu::UMemory *) (icu::UObject *)(icu::MeasureUnit *) ((icu::CurrencyUnit *) x));
}
static void *_p_icu__SimpleDateFormatTo_p_icu__DateFormat(void *x) {
    return (void *)((icu::DateFormat *)  ((icu::SimpleDateFormat *) x));
}
static void *_p_icu__GregorianCalendarTo_p_icu__Calendar(void *x) {
    return (void *)((icu::Calendar *)  ((icu::GregorianCalendar *) x));
}
static void *_p_icu__MeasureTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::Measure *) x));
}
static void *_p_icu__ChoiceFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *)(icu::NumberFormat *) ((icu::ChoiceFormat *) x));
}
static void *_p_icu__MessageFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *) ((icu::MessageFormat *) x));
}
static void *_p_icu__MeasureFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *) ((icu::MeasureFormat *) x));
}
static void *_p_icu__DateFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *) ((icu::DateFormat *) x));
}
static void *_p_icu__SimpleDateFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *)(icu::DateFormat *) ((icu::SimpleDateFormat *) x));
}
static void *_p_icu__DateFormatSymbolsTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::DateFormatSymbols *) x));
}
static void *_p_icu__DecimalFormatSymbolsTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::DecimalFormatSymbols *) x));
}
static void *_p_icu__StringEnumerationTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::StringEnumeration *) x));
}
static void *_p_icu__ReplaceableTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::Replaceable *) x));
}
static void *_p_icu__CurrencyAmountTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Measure *) ((icu::CurrencyAmount *) x));
}
static void *_p_icu__ForwardCharacterIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::ForwardCharacterIterator *) x));
}
static void *_p_icu__CharacterIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::ForwardCharacterIterator *) ((icu::CharacterIterator *) x));
}
static void *_p_icu__UCharCharacterIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::ForwardCharacterIterator *)(icu::CharacterIterator *) ((icu::UCharCharacterIterator *) x));
}
static void *_p_icu__StringCharacterIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::ForwardCharacterIterator *)(icu::CharacterIterator *) ((icu::StringCharacterIterator *) x));
}
static void *_p_icu__BreakIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::BreakIterator *) x));
}
static void *_p_icu__RuleBasedBreakIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::BreakIterator *) ((icu::RuleBasedBreakIterator *) x));
}
static void *_p_icu__DictionaryBasedBreakIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::BreakIterator *)(icu::RuleBasedBreakIterator *) ((icu::DictionaryBasedBreakIterator *) x));
}
static void *_p_icu__CanonicalIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::CanonicalIterator *) x));
}
static void *_p_icu__CollationElementIteratorTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::CollationElementIterator *) x));
}
static void *_p_icu__GregorianCalendarTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Calendar *) ((icu::GregorianCalendar *) x));
}
static void *_p_icu__CalendarTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::Calendar *) x));
}
static void *_p_icu__LocaleTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::Locale *) x));
}
static void *_p_icu__UnicodeStringTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Replaceable *) ((icu::UnicodeString *) x));
}
static void *_p_icu__RuleBasedNumberFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *)(icu::NumberFormat *) ((icu::RuleBasedNumberFormat *) x));
}
static void *_p_icu__DecimalFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *)(icu::NumberFormat *) ((icu::DecimalFormat *) x));
}
static void *_p_icu__NumberFormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::Format *) ((icu::NumberFormat *) x));
}
static void *_p_icu__FormatTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::Format *) x));
}
static void *_p_icu__ResourceBundleTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::ResourceBundle *) x));
}
static void *_p_icu__MeasureUnitTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::MeasureUnit *) x));
}
static void *_p_icu__SimpleTimeZoneTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::TimeZone *) ((icu::SimpleTimeZone *) x));
}
static void *_p_icu__TimeZoneTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::TimeZone *) x));
}
static void *_p_icu__FormattableTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::Formattable *) x));
}
static void *_p_icu__ParsePositionTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::ParsePosition *) x));
}
static void *_p_icu__FieldPositionTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *)  ((icu::FieldPosition *) x));
}
static void *_p_icu__CurrencyUnitTo_p_icu__UObject(void *x) {
    return (void *)((icu::UObject *) (icu::MeasureUnit *) ((icu::CurrencyUnit *) x));
}
static void *_p_icu__NumberFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *)  ((icu::NumberFormat *) x));
}
static void *_p_icu__DecimalFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *) (icu::NumberFormat *) ((icu::DecimalFormat *) x));
}
static void *_p_icu__RuleBasedNumberFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *) (icu::NumberFormat *) ((icu::RuleBasedNumberFormat *) x));
}
static void *_p_icu__MeasureFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *)  ((icu::MeasureFormat *) x));
}
static void *_p_icu__MessageFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *)  ((icu::MessageFormat *) x));
}
static void *_p_icu__ChoiceFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *) (icu::NumberFormat *) ((icu::ChoiceFormat *) x));
}
static void *_p_icu__DateFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *)  ((icu::DateFormat *) x));
}
static void *_p_icu__SimpleDateFormatTo_p_icu__Format(void *x) {
    return (void *)((icu::Format *) (icu::DateFormat *) ((icu::SimpleDateFormat *) x));
}
static void *_p_icu__DecimalFormatTo_p_icu__NumberFormat(void *x) {
    return (void *)((icu::NumberFormat *)  ((icu::DecimalFormat *) x));
}
static void *_p_icu__RuleBasedNumberFormatTo_p_icu__NumberFormat(void *x) {
    return (void *)((icu::NumberFormat *)  ((icu::RuleBasedNumberFormat *) x));
}
static void *_p_icu__ChoiceFormatTo_p_icu__NumberFormat(void *x) {
    return (void *)((icu::NumberFormat *)  ((icu::ChoiceFormat *) x));
}
static void *_p_icu__SimpleTimeZoneTo_p_icu__TimeZone(void *x) {
    return (void *)((icu::TimeZone *)  ((icu::SimpleTimeZone *) x));
}
static swig_type_info _swigt__p_icu__Locale[] = {{"_p_icu__Locale", 0, "icu::Locale *", 0, 0, 0, 0},{"_p_icu__Locale", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__UMemory[] = {{"_p_icu__UMemory", 0, "icu::UMemory *", 0, 0, 0, 0},{"_p_icu__Locale", _p_icu__LocaleTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__UMemory", 0, 0, 0, 0, 0, 0},{"_p_icu__Measure", _p_icu__MeasureTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__Format", _p_icu__FormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__ChoiceFormat", _p_icu__ChoiceFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__MeasureFormat", _p_icu__MeasureFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__MessageFormat", _p_icu__MessageFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__DateFormat", _p_icu__DateFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__SimpleDateFormat", _p_icu__SimpleDateFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__DecimalFormatSymbols", _p_icu__DecimalFormatSymbolsTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__DateFormatSymbols", _p_icu__DateFormatSymbolsTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__StringEnumeration", _p_icu__StringEnumerationTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__Replaceable", _p_icu__ReplaceableTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__CurrencyAmount", _p_icu__CurrencyAmountTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__CharacterIterator", _p_icu__CharacterIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__ForwardCharacterIterator", _p_icu__ForwardCharacterIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__UCharCharacterIterator", _p_icu__UCharCharacterIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__StringCharacterIterator", _p_icu__StringCharacterIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__BreakIterator", _p_icu__BreakIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__RuleBasedBreakIterator", _p_icu__RuleBasedBreakIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__DictionaryBasedBreakIterator", _p_icu__DictionaryBasedBreakIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__CanonicalIterator", _p_icu__CanonicalIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__CollationElementIterator", _p_icu__CollationElementIteratorTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__GregorianCalendar", _p_icu__GregorianCalendarTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__Calendar", _p_icu__CalendarTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__UObject", _p_icu__UObjectTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__UnicodeString", _p_icu__UnicodeStringTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__NumberFormat", _p_icu__NumberFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__DecimalFormat", _p_icu__DecimalFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__RuleBasedNumberFormat", _p_icu__RuleBasedNumberFormatTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__ResourceBundle", _p_icu__ResourceBundleTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__MeasureUnit", _p_icu__MeasureUnitTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__SimpleTimeZone", _p_icu__SimpleTimeZoneTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__TimeZone", _p_icu__TimeZoneTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__Formattable", _p_icu__FormattableTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__ParsePosition", _p_icu__ParsePositionTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__FieldPosition", _p_icu__FieldPositionTo_p_icu__UMemory, 0, 0, 0, 0, 0},{"_p_icu__CurrencyUnit", _p_icu__CurrencyUnitTo_p_icu__UMemory, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__ChoiceFormat[] = {{"_p_icu__ChoiceFormat", 0, "icu::ChoiceFormat *", 0, 0, 0, 0},{"_p_icu__ChoiceFormat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__MessageFormat[] = {{"_p_icu__MessageFormat", 0, "icu::MessageFormat *", 0, 0, 0, 0},{"_p_icu__MessageFormat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__MeasureFormat[] = {{"_p_icu__MeasureFormat", 0, "icu::MeasureFormat *", 0, 0, 0, 0},{"_p_icu__MeasureFormat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__Format[] = {{"_p_icu__Format", 0, "icu::Format *", 0, 0, 0, 0},{"_p_icu__NumberFormat", _p_icu__NumberFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__DecimalFormat", _p_icu__DecimalFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__RuleBasedNumberFormat", _p_icu__RuleBasedNumberFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__Format", 0, 0, 0, 0, 0, 0},{"_p_icu__ChoiceFormat", _p_icu__ChoiceFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__MeasureFormat", _p_icu__MeasureFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__MessageFormat", _p_icu__MessageFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__DateFormat", _p_icu__DateFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{"_p_icu__SimpleDateFormat", _p_icu__SimpleDateFormatTo_p_icu__Format, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__DateFormat[] = {{"_p_icu__DateFormat", 0, "icu::DateFormat *", 0, 0, 0, 0},{"_p_icu__DateFormat", 0, 0, 0, 0, 0, 0},{"_p_icu__SimpleDateFormat", _p_icu__SimpleDateFormatTo_p_icu__DateFormat, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__SimpleDateFormat[] = {{"_p_icu__SimpleDateFormat", 0, "icu::SimpleDateFormat *", 0, 0, 0, 0},{"_p_icu__SimpleDateFormat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_UResType[] = {{"_p_UResType", 0, "enum UResType *|UResType *", 0, 0, 0, 0},{"_p_UResType", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ULocDataLocaleType[] = {{"_p_ULocDataLocaleType", 0, "ULocDataLocaleType *", 0, 0, 0, 0},{"_p_ULocDataLocaleType", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__ULocDataLocaleType[] = {{"_p_icu__ULocDataLocaleType", 0, "enum icu::ULocDataLocaleType *|icu::ULocDataLocaleType *", 0, 0, 0, 0},{"_p_icu__ULocDataLocaleType", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__DateFormatSymbols[] = {{"_p_icu__DateFormatSymbols", 0, "icu::DateFormatSymbols *", 0, 0, 0, 0},{"_p_icu__DateFormatSymbols", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__StringEnumeration[] = {{"_p_icu__StringEnumeration", 0, "icu::StringEnumeration *", 0, 0, 0, 0},{"_p_icu__StringEnumeration", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__size_t[] = {{"_std__size_t", 0, "std::size_t", 0, 0, 0, 0},{"_std__size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__Calendar[] = {{"_p_icu__Calendar", 0, "icu::Calendar *", 0, 0, 0, 0},{"_p_icu__Calendar", 0, 0, 0, 0, 0, 0},{"_p_icu__GregorianCalendar", _p_icu__GregorianCalendarTo_p_icu__Calendar, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__GregorianCalendar[] = {{"_p_icu__GregorianCalendar", 0, "icu::GregorianCalendar *", 0, 0, 0, 0},{"_p_icu__GregorianCalendar", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__Collator[] = {{"_p_icu__Collator", 0, "icu::Collator *", 0, 0, 0, 0},{"_p_icu__Collator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__RuleBasedCollator[] = {{"_p_icu__RuleBasedCollator", 0, "icu::RuleBasedCollator *", 0, 0, 0, 0},{"_p_icu__RuleBasedCollator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__UObject[] = {{"_p_icu__UObject", 0, "icu::UObject *", 0, 0, 0, 0},{"_p_icu__Locale", _p_icu__LocaleTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__Measure", _p_icu__MeasureTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__Format", _p_icu__FormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__ChoiceFormat", _p_icu__ChoiceFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__MeasureFormat", _p_icu__MeasureFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__MessageFormat", _p_icu__MessageFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__DateFormat", _p_icu__DateFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__SimpleDateFormat", _p_icu__SimpleDateFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__DateFormatSymbols", _p_icu__DateFormatSymbolsTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__DecimalFormatSymbols", _p_icu__DecimalFormatSymbolsTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__StringEnumeration", _p_icu__StringEnumerationTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__Replaceable", _p_icu__ReplaceableTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__CurrencyAmount", _p_icu__CurrencyAmountTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__CharacterIterator", _p_icu__CharacterIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__ForwardCharacterIterator", _p_icu__ForwardCharacterIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__UCharCharacterIterator", _p_icu__UCharCharacterIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__StringCharacterIterator", _p_icu__StringCharacterIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__BreakIterator", _p_icu__BreakIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__RuleBasedBreakIterator", _p_icu__RuleBasedBreakIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__DictionaryBasedBreakIterator", _p_icu__DictionaryBasedBreakIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__CanonicalIterator", _p_icu__CanonicalIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__CollationElementIterator", _p_icu__CollationElementIteratorTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__GregorianCalendar", _p_icu__GregorianCalendarTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__Calendar", _p_icu__CalendarTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__UObject", 0, 0, 0, 0, 0, 0},{"_p_icu__UnicodeString", _p_icu__UnicodeStringTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__NumberFormat", _p_icu__NumberFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__DecimalFormat", _p_icu__DecimalFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__RuleBasedNumberFormat", _p_icu__RuleBasedNumberFormatTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__ResourceBundle", _p_icu__ResourceBundleTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__MeasureUnit", _p_icu__MeasureUnitTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__SimpleTimeZone", _p_icu__SimpleTimeZoneTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__TimeZone", _p_icu__TimeZoneTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__Formattable", _p_icu__FormattableTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__ParsePosition", _p_icu__ParsePositionTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__FieldPosition", _p_icu__FieldPositionTo_p_icu__UObject, 0, 0, 0, 0, 0},{"_p_icu__CurrencyUnit", _p_icu__CurrencyUnitTo_p_icu__UObject, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__UnicodeString[] = {{"_p__UnicodeString", 0, "_UnicodeString *", 0, 0, 0, 0},{"_p__UnicodeString", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__UnicodeString[] = {{"_p_icu__UnicodeString", 0, "icu::UnicodeString *", 0, 0, 0, 0},{"_p_icu__UnicodeString", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__RuleBasedNumberFormat[] = {{"_p_icu__RuleBasedNumberFormat", 0, "icu::RuleBasedNumberFormat *", 0, 0, 0, 0},{"_p_icu__RuleBasedNumberFormat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__DecimalFormat[] = {{"_p_icu__DecimalFormat", 0, "icu::DecimalFormat *", 0, 0, 0, 0},{"_p_icu__DecimalFormat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__NumberFormat[] = {{"_p_icu__NumberFormat", 0, "icu::NumberFormat *", 0, 0, 0, 0},{"_p_icu__NumberFormat", 0, 0, 0, 0, 0, 0},{"_p_icu__DecimalFormat", _p_icu__DecimalFormatTo_p_icu__NumberFormat, 0, 0, 0, 0, 0},{"_p_icu__RuleBasedNumberFormat", _p_icu__RuleBasedNumberFormatTo_p_icu__NumberFormat, 0, 0, 0, 0, 0},{"_p_icu__ChoiceFormat", _p_icu__ChoiceFormatTo_p_icu__NumberFormat, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__int32_t[] = {{"_p__int32_t", 0, "_int32_t *", 0, 0, 0, 0},{"_p__int32_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__TimeZone[] = {{"_p_icu__TimeZone", 0, "icu::TimeZone *", 0, 0, 0, 0},{"_p_icu__TimeZone", 0, 0, 0, 0, 0, 0},{"_p_icu__SimpleTimeZone", _p_icu__SimpleTimeZoneTo_p_icu__TimeZone, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__SimpleTimeZone[] = {{"_p_icu__SimpleTimeZone", 0, "icu::SimpleTimeZone *", 0, 0, 0, 0},{"_p_icu__SimpleTimeZone", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__Formattable[] = {{"_p_icu__Formattable", 0, "icu::Formattable *", 0, 0, 0, 0},{"_p_icu__Formattable", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_UErrorCode[] = {{"_p_UErrorCode", 0, "UErrorCode *", 0, 0, 0, 0},{"_p_UErrorCode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_LeakyUnicodeStringArray3[] = {{"_p_LeakyUnicodeStringArray3", 0, "LeakyUnicodeStringArray3 *", 0, 0, 0, 0},{"_p_LeakyUnicodeStringArray3", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__FieldPosition[] = {{"_p_icu__FieldPosition", 0, "icu::FieldPosition *", 0, 0, 0, 0},{"_p_icu__FieldPosition", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_icu__ParsePosition[] = {{"_p_icu__ParsePosition", 0, "icu::ParsePosition *", 0, 0, 0, 0},{"_p_icu__ParsePosition", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_icu__Locale, 
_swigt__p_icu__UMemory, 
_swigt__p_icu__ChoiceFormat, 
_swigt__p_icu__MessageFormat, 
_swigt__p_icu__MeasureFormat, 
_swigt__p_icu__Format, 
_swigt__p_icu__DateFormat, 
_swigt__p_icu__SimpleDateFormat, 
_swigt__p_UResType, 
_swigt__p_ULocDataLocaleType, 
_swigt__p_icu__ULocDataLocaleType, 
_swigt__p_icu__DateFormatSymbols, 
_swigt__p_char, 
_swigt__p_icu__StringEnumeration, 
_swigt__size_t, 
_swigt__std__size_t, 
_swigt__p_icu__Calendar, 
_swigt__p_icu__GregorianCalendar, 
_swigt__p_icu__Collator, 
_swigt__p_icu__RuleBasedCollator, 
_swigt__p_icu__UObject, 
_swigt__ptrdiff_t, 
_swigt__std__ptrdiff_t, 
_swigt__p__UnicodeString, 
_swigt__p_icu__UnicodeString, 
_swigt__p_icu__RuleBasedNumberFormat, 
_swigt__p_icu__DecimalFormat, 
_swigt__p_icu__NumberFormat, 
_swigt__p__int32_t, 
_swigt__p_icu__TimeZone, 
_swigt__p_icu__SimpleTimeZone, 
_swigt__p_icu__Formattable, 
_swigt__p_UErrorCode, 
_swigt__p_LeakyUnicodeStringArray3, 
_swigt__p_icu__FieldPosition, 
_swigt__p_icu__ParsePosition, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
    static swig_type_info **
    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
        static PyMethodDef swig_empty_runtime_method_table[] = {
            {
                NULL, NULL, 0, NULL
            } 
        };/* Sentinel */
        
        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
        swig_empty_runtime_method_table);
        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
        if (pointer && module) {
            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
        }
        return type_list_handle;
    } 
    
    static swig_type_info **
    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
        swig_type_info **type_pointer;
        
        /* first check if module already created */
        type_pointer = SWIG_Python_GetTypeListHandle();
        if (type_pointer) {
            return type_pointer;
        } else {
            /* create a new module and variable */
            return SWIG_Python_SetTypeListHandle(type_list_handle);
        }
    }
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"DateFormatSymbols_FORMAT", SWIG_From_int((int)(icu::DateFormatSymbols::FORMAT))); 
    }
    {
        PyDict_SetItemString(d,"DateFormatSymbols_STANDALONE", SWIG_From_int((int)(icu::DateFormatSymbols::STANDALONE))); 
    }
    {
        PyDict_SetItemString(d,"DateFormatSymbols_WIDE", SWIG_From_int((int)(icu::DateFormatSymbols::WIDE))); 
    }
    {
        PyDict_SetItemString(d,"DateFormatSymbols_ABBREVIATED", SWIG_From_int((int)(icu::DateFormatSymbols::ABBREVIATED))); 
    }
    {
        PyDict_SetItemString(d,"DateFormatSymbols_NARROW", SWIG_From_int((int)(icu::DateFormatSymbols::NARROW))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kNone", SWIG_From_int((int)(icu::DateFormat::kNone))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kFull", SWIG_From_int((int)(icu::DateFormat::kFull))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kLong", SWIG_From_int((int)(icu::DateFormat::kLong))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kMedium", SWIG_From_int((int)(icu::DateFormat::kMedium))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kShort", SWIG_From_int((int)(icu::DateFormat::kShort))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDateOffset", SWIG_From_int((int)(icu::DateFormat::kDateOffset))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDateTime", SWIG_From_int((int)(icu::DateFormat::kDateTime))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDefault", SWIG_From_int((int)(icu::DateFormat::kDefault))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_FULL", SWIG_From_int((int)(icu::DateFormat::FULL))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_LONG", SWIG_From_int((int)(icu::DateFormat::LONG))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_MEDIUM", SWIG_From_int((int)(icu::DateFormat::MEDIUM))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_SHORT", SWIG_From_int((int)(icu::DateFormat::SHORT))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DEFAULT", SWIG_From_int((int)(icu::DateFormat::DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DATE_OFFSET", SWIG_From_int((int)(icu::DateFormat::DATE_OFFSET))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_NONE", SWIG_From_int((int)(icu::DateFormat::NONE))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DATE_TIME", SWIG_From_int((int)(icu::DateFormat::DATE_TIME))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kEraField", SWIG_From_int((int)(icu::DateFormat::kEraField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kYearField", SWIG_From_int((int)(icu::DateFormat::kYearField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kMonthField", SWIG_From_int((int)(icu::DateFormat::kMonthField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDateField", SWIG_From_int((int)(icu::DateFormat::kDateField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kHourOfDay1Field", SWIG_From_int((int)(icu::DateFormat::kHourOfDay1Field))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kHourOfDay0Field", SWIG_From_int((int)(icu::DateFormat::kHourOfDay0Field))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kMinuteField", SWIG_From_int((int)(icu::DateFormat::kMinuteField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kSecondField", SWIG_From_int((int)(icu::DateFormat::kSecondField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kMillisecondField", SWIG_From_int((int)(icu::DateFormat::kMillisecondField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDayOfWeekField", SWIG_From_int((int)(icu::DateFormat::kDayOfWeekField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDayOfYearField", SWIG_From_int((int)(icu::DateFormat::kDayOfYearField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDayOfWeekInMonthField", SWIG_From_int((int)(icu::DateFormat::kDayOfWeekInMonthField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kWeekOfYearField", SWIG_From_int((int)(icu::DateFormat::kWeekOfYearField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kWeekOfMonthField", SWIG_From_int((int)(icu::DateFormat::kWeekOfMonthField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kAmPmField", SWIG_From_int((int)(icu::DateFormat::kAmPmField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kHour1Field", SWIG_From_int((int)(icu::DateFormat::kHour1Field))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kHour0Field", SWIG_From_int((int)(icu::DateFormat::kHour0Field))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kTimezoneField", SWIG_From_int((int)(icu::DateFormat::kTimezoneField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kYearWOYField", SWIG_From_int((int)(icu::DateFormat::kYearWOYField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kDOWLocalField", SWIG_From_int((int)(icu::DateFormat::kDOWLocalField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kExtendedYearField", SWIG_From_int((int)(icu::DateFormat::kExtendedYearField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kJulianDayField", SWIG_From_int((int)(icu::DateFormat::kJulianDayField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_kMillisecondsInDayField", SWIG_From_int((int)(icu::DateFormat::kMillisecondsInDayField))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_ERA_FIELD", SWIG_From_int((int)(icu::DateFormat::ERA_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_YEAR_FIELD", SWIG_From_int((int)(icu::DateFormat::YEAR_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_MONTH_FIELD", SWIG_From_int((int)(icu::DateFormat::MONTH_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DATE_FIELD", SWIG_From_int((int)(icu::DateFormat::DATE_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_HOUR_OF_DAY1_FIELD", SWIG_From_int((int)(icu::DateFormat::HOUR_OF_DAY1_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_HOUR_OF_DAY0_FIELD", SWIG_From_int((int)(icu::DateFormat::HOUR_OF_DAY0_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_MINUTE_FIELD", SWIG_From_int((int)(icu::DateFormat::MINUTE_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_SECOND_FIELD", SWIG_From_int((int)(icu::DateFormat::SECOND_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_MILLISECOND_FIELD", SWIG_From_int((int)(icu::DateFormat::MILLISECOND_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DAY_OF_WEEK_FIELD", SWIG_From_int((int)(icu::DateFormat::DAY_OF_WEEK_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DAY_OF_YEAR_FIELD", SWIG_From_int((int)(icu::DateFormat::DAY_OF_YEAR_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_DAY_OF_WEEK_IN_MONTH_FIELD", SWIG_From_int((int)(icu::DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_WEEK_OF_YEAR_FIELD", SWIG_From_int((int)(icu::DateFormat::WEEK_OF_YEAR_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_WEEK_OF_MONTH_FIELD", SWIG_From_int((int)(icu::DateFormat::WEEK_OF_MONTH_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_AM_PM_FIELD", SWIG_From_int((int)(icu::DateFormat::AM_PM_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_HOUR1_FIELD", SWIG_From_int((int)(icu::DateFormat::HOUR1_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_HOUR0_FIELD", SWIG_From_int((int)(icu::DateFormat::HOUR0_FIELD))); 
    }
    {
        PyDict_SetItemString(d,"DateFormat_TIMEZONE_FIELD", SWIG_From_int((int)(icu::DateFormat::TIMEZONE_FIELD))); 
    }
}

