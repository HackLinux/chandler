
include ../Makefile.inc

VERSION=0.9.7i
RELVER=$(VERSION)-$(BRANCH_REV_PREFIX)2
OPENSSL=$(BUILD_ROOT)/openssl
SRC=$(OPENSSL)/openssl-$(VERSION)
TARBALL=openssl-$(SNAP)-$(RELVER).tar.gz

BUILD=build_$(SNAP)

ifeq ($(OS),Cygwin)
# Build using Visual C++ compiler
ifeq ($(DEBUG),1)
MK1MF=sed -e "s/mk1mf\.pl/mk1mf\.pl debug/" ms/do_masm.bat > ms/do_masm_debug.bat
OUT32DLL=out32dll.dbg
DOMASM=do_masm_debug.bat
else
MK1MF=echo "Defaults work"
OUT32DLL=out32dll
DOMASM=do_masm.bat
endif

$(SRC)/$(BUILD)/ms/$(DOMASM):
	cd $(SRC); \
      mkdir $(BUILD); \
      cp Makefile.org *.h $(BUILD)/; \
      cp -r crypto ssl apps certs tools util ms include test fips $(BUILD)/; \
      cd $(BUILD); \
      $(MK1MF); \
      chmod a+x ms/$(DOMASM);

openssl: apply $(SRC)/$(BUILD)/ms/$(DOMASM)
	cd $(SRC)/$(BUILD); \
      MAKEFLAGS=; \
      perl ../Configure --openssldir=$(PREFIX) --install_prefix=$(PREFIX) $(CONF_OPT) VC-WIN32; \
      ms/$(DOMASM); \
      nmake -f ms/ntdll.mak;\
      cd $(OUT32DLL); \
      mkdir -p $(BUILD_ROOT)/$(SNAP)/$(SITE)/M2Crypto; \
      cp -f ssleay32.dll $(BUILD_ROOT)/$(SNAP)/$(SITE)/M2Crypto/; \
      cp -f libeay32.dll $(BUILD_ROOT)/$(SNAP)/$(SITE)/M2Crypto/; \
      cp -f ssleay32.lib $(PREFIX)/lib/; \
      cp -f libeay32.lib $(PREFIX)/lib/; \
      cp -fr  ../inc32/openssl $(PREFIX)/Include

# Need to put the files into M2Crypto dir so that Windows finds our versions
binaries: strip
	tar -C $(BUILD_ROOT) -cvzf $(OPENSSL)/$(TARBALL) \
          $(SNAP)/$(SITE)/M2Crypto/ssleay32.dll \
          $(SNAP)/$(SITE)/M2Crypto/libeay32.dll

tests:
	cd $(SRC)/$(BUILD)/$(OUT32DLL); \
	../ms/test.bat

else

$(SRC)/$(BUILD):
	cd $(SRC); \
      mkdir $(BUILD); \
      cp -R -P Configure Makefile.org *.h crypto ssl apps certs tools util doc include fips test $(BUILD)/

openssl: apply $(SRC)/$(BUILD)
	cd $(SRC)/$(BUILD); ../config shared --openssldir=$(PREFIX) $(CONF_OPT)
	$(MAKE) -C $(SRC)/$(BUILD)
	$(MAKE) -C $(SRC)/$(BUILD) install

tests:
	cd $(SRC)/$(BUILD); \
      $(MAKE) test

ifeq ($(OS),Darwin)

binaries: strip
	tar -C $(BUILD_ROOT) -cvzf $(OPENSSL)/$(TARBALL) \
          $(SNAP)/lib/libcrypto.0.9.7.dylib \
          $(SNAP)/lib/libcrypto.0.dylib \
          $(SNAP)/lib/libcrypto.dylib \
          $(SNAP)/lib/libssl.0.9.7.dylib \
          $(SNAP)/lib/libssl.0.dylib \
          $(SNAP)/lib/libssl.dylib

else

binaries: strip
	tar -C $(BUILD_ROOT) -cvzf $(OPENSSL)/$(TARBALL) \
          $(SNAP)/lib/libcrypto.so.0.9.7 \
          $(SNAP)/lib/libcrypto.so.0 \
          $(SNAP)/lib/libcrypto.so \
          $(SNAP)/lib/libssl.so.0.9.7 \
          $(SNAP)/lib/libssl.so.0 \
          $(SNAP)/lib/libssl.so

endif # if OS X or linux
endif # if Cygwin or not

openssl-$(VERSION).tar.gz:
	$(CURL) http://builds.osafoundation.org/external/openssl-$(VERSION).tar.gz

sources: openssl-$(VERSION).tar.gz

openssl-$(VERSION)-expanded: openssl-$(VERSION).tar.gz
	tar xvzf openssl-$(VERSION).tar.gz
	touch openssl-$(VERSION)-expanded

expand: openssl-$(VERSION)-expanded

apply:
	patch -Nup0 < patches-$(VERSION); echo ok

build: expand openssl

install: $(TARBALL)
	cp -p $(TARBALL) $(CHANDLERARCHIVES)

ifneq (/,$(SRC)/$(BUILD))
clean:
	rm -rf $(SRC)/$(BUILD)
endif
