
Translator
----------


SharingTranslator implements the callbacks for converting between items and
records.

    >>> from osaf import sharing, pim
    >>> from datetime import datetime, timedelta
    >>> from decimal import Decimal
    >>> from PyICU import ICUtzinfo
    >>> from repository.persistence.RepositoryView import NullRepositoryView
    >>> rv = NullRepositoryView()


    >>> t = sharing.translator.SharingTranslator(rv)


ItemRecord type
- - - - - - - -

Importing:

    >>> t.startImport()

    >>> utc = ICUtzinfo.getInstance('UTC')
    >>> rec = sharing.model.ItemRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         title='Translator test',
    ...         triage='200 -1167792143.00 1',
    ...         createdOn=Decimal("1164803131"),
    ...         hasBeenSent=0,
    ...         needsReply=0
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item = rv.findUUID('f230dcd4-7c32-4c3f-908b-d92081cc9a89')
    >>> item is not None
    True

    >>> item.itsKind.itsName
    'ContentItem'

    >>> item.displayName
    u'Translator test'

    >>> item.triageStatus
    TriageEnum.later

    >>> item.createdOn == datetime(2006, 11, 29, 12, 25, 31, tzinfo=utc)
    True



Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records
    [ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Translator test', u'200 -1167792143.00 1', Decimal("1164803131"), 0, 0), ModifiedByRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'', Decimal("1164803131"), 500)]





NoteRecord type
- - - - - - - -

Importing:

    >>> rec = sharing.model.NoteRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         body='This is the body',
    ...         icalUid=None,
    ...         icalProperties=None,
    ...         icalParameters=None
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item.itsKind.itsName
    'Note'

    >>> item.body
    u'This is the body'

TODO: icaluid

Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records
    [ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Translator test', u'200 -1167792143.00 1', Decimal("1164803131"), 0, 0), ModifiedByRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'', Decimal("1164803131"), 500), NoteRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'This is the body', None, None, None)]

TODO: icaluid




TaskRecord type
- - - - - - - -

Importing:

    >>> pim.stamping.has_stamp(item, pim.TaskStamp)
    False

    >>> rec = sharing.model.TaskRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89'
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item.itsKind.itsName
    'Note'

    >>> pim.stamping.has_stamp(item, pim.TaskStamp)
    True

Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records
    [ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Translator test', u'200 -1167792143.00 1', Decimal("1164803131"), 0, 0), ModifiedByRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'', Decimal("1164803131"), 500), NoteRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'This is the body', None, None, None), TaskRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89')]


MailMessageRecord type
Importing:

    >>> pim.stamping.has_stamp(item, pim.MailStamp)
    False

    >>> rec = sharing.model.MailMessageRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         messageId = u'1234@test.com',
    ...         headers = u'From: test@test.com\nTo: test1@test.com',
    ...         fromAddress = 'test@test.com',
    ...         toAddress = 'test1@test.com, test2@test.com',
    ...         ccAddress = None,
    ...         bccAddress = None,
    ...         originators = u'Test User',
    ...         dateSent = 'Sat, 31 Mar 2007 00:03:34 +0000',
    ...         inReplyTo = None,
    ...         references = None,
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> pim.stamping.has_stamp(item, pim.MailStamp)
    True
    >>> mail = pim.MailStamp(item)
    >>> mail.messageId
    u'1234@test.com'
    >>> mail.headers['From']
    u'test@test.com'
    >>> mail.fromAddress.format()
    u'test@test.com'
    >>> mail.toAddress.first().format()
    u'test1@test.com'
    >>> mail.originators.first().format()
    u'Test User'
    >>> mail.dateSentString
    u'Sat, 31 Mar 2007 00:03:34 +0000'


Exporting:

    >>> t.startExport()
    >>> records = [r for r in t.exportItem(item) if isinstance(r, sharing.model.MailMessageRecord)]
    >>> records
    [MailMessageRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'1234@test.com', u'To: test1@test.com\nFrom: test@test.com', u'test@test.com', u'test1@test.com, test2@test.com', None, None, u'Test User', u'Sat, 31 Mar 2007 00:03:34 +0000', u'', None)]


EventRecord type
- - - - - - - -

Importing:

    >>> pim.stamping.has_stamp(item, pim.EventStamp)
    False
    
    >>> rec = sharing.model.EventRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         dtstart = ';VALUE=DATE-TIME;TZID=US/Pacific:20070201T140000',
    ...         duration = 'PT1H',
    ...         location = 'Nowhere',
    ...         rrule = None,
    ...         exrule = None,
    ...         rdate = None,
    ...         exdate = None,
    ...         status = 'CANCELLED',
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> pim.stamping.has_stamp(item, pim.EventStamp)
    True
    >>> event = pim.EventStamp(item)
    >>> event.transparency
    'fyi'
    >>> event.location.displayName
    u'Nowhere'
    >>> event.startTime
    datetime.datetime(2007, 2, 1, 14, 0, tzinfo=<ICUtzinfo: US/Pacific>)
    >>> event.duration
    datetime.timedelta(0, 3600)

Exporting:

    >>> t.startExport()
    >>> records = [r for r in t.exportItem(item) if isinstance(r, sharing.model.EventRecord)]
    >>> records
    [EventRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u';VALUE=DATE-TIME;TZID=US/Pacific:20070201T140000', u'PT1H', u'Nowhere', None, None, None, None, u'CANCELLED')]

Recurrence
- - - - -

Importing:
    
    >>> new_rec = sharing.model.EventRecord(
    ...             uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...             dtstart = rec.dtstart,
    ...             duration = rec.duration,
    ...             location = rec.location,
    ...             rrule = 'FREQ=WEEKLY;COUNT=5;BYDAY=TU,TH',
    ...             exrule = None,
    ...             rdate = ';VALUE=DATE-TIME;TZID=US/Pacific:20070223T140000,20070225T140000',
    ...             exdate = ';VALUE=DATE-TIME;TZID=US/Pacific:20070206T140000',
    ...             status = rec.status,
    ... )
    
    >>> rs = sharing.RecordSet([new_rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()
    
    >>> [i.day for i in event.createDateUtilFromRule()]
    [1, 8, 13, 15, 23, 25]
    
Exporting:
    
    >>> t.startExport()
    >>> records = [r for r in t.exportItem(item) if isinstance(r, sharing.model.EventRecord)]
    >>> len(records) == 1
    True
    >>> record = records[0]
    >>> record.rrule
    u'FREQ=WEEKLY;COUNT=5;BYDAY=TU,TH'
    >>> record.exrule is None
    True
    >>> record.rdate
    u';VALUE=DATE-TIME;TZID=US/Pacific:20070223T140000,20070225T140000'
    >>> record.exdate
    u';VALUE=DATE-TIME;TZID=US/Pacific:20070206T140000'
    
Modifications
- - - - - - -

Importing:

    >>> mod_rec = sharing.model.ItemRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89:;VALUE=DATE-TIME;TZID=US/Pacific:20070223T140000',
    ...         title='Changed title',
    ...         triage=sharing.Inherit,
    ...         createdOn=sharing.Inherit,
    ...         hasBeenSent=sharing.Inherit,
    ...         needsReply=sharing.Inherit
    ... )

    >>> rs = sharing.RecordSet([mod_rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()
    
    >>> mod = event.getRecurrenceID(event.startTime + timedelta(22))
    >>> mod.itsItem.displayName
    u'Changed title'

Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(mod.itsItem))
    >>> event_records = [r for r in records if isinstance(r, sharing.model.EventRecord)]
    >>> len(event_records) == 1
    True
    >>> event_record = event_records[0]
    >>> event_record.dtstart
    Inherit
    >>> event_record.duration
    Inherit
    >>> item_records = [r for r in records if isinstance(r, sharing.model.ItemRecord)]
    >>> len(item_records) == 1
    True
    >>> item_record = item_records[0]
    >>> item_record.title
    u'Changed title'
    
Custom Reminders
- - - - - - - - 

Importing:

    >>> t.startImport()

    >>> item_rec = sharing.model.ItemRecord(
    ...              uuid='a9b019a4-d995-11db-f269-0016cbca6aed',
    ...              title='Item with reminder',
    ...              triage='200 -1167792143.00 1',
    ...              createdOn=Decimal("1164803131"),
    ...              hasBeenSent=0,
    ...              needsReply=0
    ... )
    >>> alarm_rec = sharing.model.DisplayAlarmRecord(
    ...               uuid='a9b019a4-d995-11db-f269-0016cbca6aed',
    ...               description="Don't forget!",
    ...               trigger=';VALUE=DATE-TIME:20060304T220000Z',
    ...               duration="PT1H",
    ...               repeat=1,
    ... )

    >>> rs = sharing.RecordSet([item_rec, alarm_rec])

    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item = rv.findUUID('a9b019a4-d995-11db-f269-0016cbca6aed')
    >>> len(item.reminders)
    1
    >>> item.reminders.first()
    <Reminder (new): ...>
    >>> item.reminders.first().absoluteTime
    datetime.datetime(2006, 3, 4, 22, 0, tzinfo=<ICUtzinfo: UTC>)
    >>> item.reminders.first().description
    u"Don't forget!"
    
Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> len(records)
    3
    >>> records[0]
    ItemRecord('a9b019a4-d995-11db-f269-0016cbca6aed', u'Item with reminder', u'200 -1167792143.00 1', Decimal("1164803131"), 0, 0)
    >>> records[1]
    ModifiedByRecord(...)
    >>> records[2]
    DisplayAlarmRecord('a9b019a4-d995-11db-f269-0016cbca6aed', u"Don't forget!", u';VALUE=DATE-TIME:20060304T220000Z', u'PT1H', 1)
    
    >>> del item.reminders.first().duration
    >>> del item.reminders.first().repeat
    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records[2]
    DisplayAlarmRecord('a9b019a4-d995-11db-f269-0016cbca6aed', u"Don't forget!", u';VALUE=DATE-TIME:20060304T220000Z', None, None)
    

Relative Reminders
- - - - - - - - -

Importing:

    >>> item_rec = sharing.model.ItemRecord(
    ...              uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...              title='Event Item with reminder',
    ...              triage='200 -1167792996.00 1',
    ...              createdOn=Decimal("1164805552"),
    ...              hasBeenSent=0,
    ...              needsReply=1
    ... )
    >>> note_rec = sharing.model.NoteRecord(
    ...         uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...         body='This is the body',
    ...         icalUid=None,
    ...         icalProperties=None,
    ...         icalParameters=None
    ... )
    >>> event_rec = sharing.model.EventRecord(
    ...         uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...         dtstart = ';VALUE=DATE-TIME;TZID=US/Pacific:20070516T180000',
    ...         duration = 'PT1H',
    ...         location = 'Nowhere',
    ...         rrule = None,
    ...         exrule = None,
    ...         rdate = None,
    ...         exdate = None,
    ...         status = 'CONFIRMED',
    ... )
    >>> relative_alarm_rec = sharing.model.DisplayAlarmRecord(
    ...         uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...         description="Time to go!",
    ...         trigger='-PT5M',
    ...         duration=sharing.Inherit,
    ...         repeat=sharing.Inherit,
    ... )
    >>> rs = sharing.RecordSet([item_rec, note_rec, event_rec,
    ...                         relative_alarm_rec])

    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item = rv.findUUID('800644b6-dd73-11db-f79a-0016cbca6aed')
    >>> pim.has_stamp(item, pim.EventStamp)
    True
    >>> len(item.reminders)
    1
    >>> item.reminders.first()
    <RelativeReminder (new): ...>
    >>> item.reminders.first().delta
    datetime.timedelta(-1, 86100)
    >>> item.reminders.first().description
    u'Time to go!'
    
Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> len(records)
    5
    >>> records[0]
    ItemRecord('800644b6-dd73-11db-f79a-0016cbca6aed', u'Event Item with reminder', u'200 -1167792996.00 1', Decimal("1164805552"), 0, 0)
    >>> records[1]
    ModifiedByRecord(...)
    >>> records[2]
    DisplayAlarmRecord('800644b6-dd73-11db-f79a-0016cbca6aed', u'Time to go!', u'-PT5M', None, None)
    >>> records[3]
    NoteRecord('800644b6-dd73-11db-f79a-0016cbca6aed', ...)
    >>> records[4]
    EventRecord('800644b6-dd73-11db-f79a-0016cbca6aed', ...)
