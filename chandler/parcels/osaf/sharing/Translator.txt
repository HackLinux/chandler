
Translator
----------


SharingTranslator implements the callbacks for converting between items and
records.

    >>> from osaf import sharing, pim
    >>> from application.Parcel import Parcel
    >>> from datetime import datetime, timedelta
    >>> from decimal import Decimal
    >>> from PyICU import ICUtzinfo, TimeZone
    >>> TimeZone.setDefault(ICUtzinfo.getInstance(
    ...                              "America/Los_Angeles").timezone)
    >>> from chandlerdb.persistence.RepositoryView import currentview
    >>> from chandlerdb.persistence.RepositoryView import NullRepositoryView
    >>> rv = NullRepositoryView()


    >>> t = sharing.translator.SharingTranslator(rv)


ItemRecord type
- - - - - - - -

Importing:

    >>> t.startImport()

    >>> utc = ICUtzinfo.getInstance('UTC')
    >>> rec = sharing.model.ItemRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         title='Translator test',
    ...         triage='200 -1167792143.00 1',
    ...         createdOn=Decimal("1164803131"),
    ...         hasBeenSent=0,
    ...         needsReply=0,
    ...         read=0,
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item = rv.findUUID('f230dcd4-7c32-4c3f-908b-d92081cc9a89')
    >>> item is not None
    True

    >>> item.itsKind.itsName
    'ContentItem'

    >>> item.displayName
    u'Translator test'

    >>> item.triageStatus
    TriageEnum.later

    >>> item.createdOn == datetime(2006, 11, 29, 12, 25, 31, tzinfo=utc)
    True



Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records
    [ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Translator test', '200 -1167792143.00 1', Decimal("1164803131"), 0, 0, 0), ModifiedByRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'', Decimal("1164803131"), 500), DisplayAlarmRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', None, None, None, None)]


Autoresolving Conflicts:

To test this, we need a State object whose baseline 'agreed' contains the old
values of the item::

    >>> state = sharing.State(itsView=rv, peer=None)
    >>> state.set(sharing.RecordSet(records), sharing.Diff())

Next we make a local triageStatusChanged change::

    >>> item._triageStatusChanged = -1167792300.0
    >>> records = list(t.exportItem(item))

...and also an "external" triageStatusChanged change::

    >>> delta = [sharing.model.ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', sharing.NoChange, '200 -1167792400.0 1', sharing.NoChange, sharing.NoChange, sharing.NoChange, sharing.NoChange)]

Do the merge and we get a conflict::

    >>> dSend, dApply, pending = state.merge(sharing.RecordSet(records), sharing.Diff(delta))
    >>> state.updateConflicts(item)
    >>> list(sharing.getConflicts(item))
    [Triage status : Later]

Run the auto-resolve code, and the conflicts go away::

    >>> state.autoResolve(sharing.RecordSet(records), dApply, dSend)
    >>> item._triageStatusChanged
    -1167792300.0
    >>> t.importRecords(dApply)
    >>> item._triageStatusChanged
    -1167792400.0
    >>> state.updateConflicts(item)
    >>> list(sharing.getConflicts(item))
    []


Make sure that a triage status conflict is indeed kept as a conflict::

    >>> state = sharing.State(itsView=rv, peer=None)
    >>> state.set(sharing.RecordSet(records), sharing.Diff())

Next we make a local triageStatus change::

    >>> item._triageStatus = pim.TriageEnum.now
    >>> records = list(t.exportItem(item))

...and also an "external" triageStatus change::

    >>> delta = [sharing.model.ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', sharing.NoChange, '300 -1167792400.0 1', sharing.NoChange, sharing.NoChange, sharing.NoChange, sharing.NoChange)]

Do the merge and we get a conflict::

    >>> dSend, dApply, pending = state.merge(sharing.RecordSet(records), sharing.Diff(delta))
    >>> state.updateConflicts(item)
    >>> list(sharing.getConflicts(item))
    [Triage status : Done]

Run the auto-resolve code, and the conflicts do not go away::

    >>> state.autoResolve(sharing.RecordSet(records), dApply, dSend)
    >>> t.importRecords(dApply)
    >>> state.updateConflicts(item)
    >>> list(sharing.getConflicts(item))
    [Triage status : Done]



'Inherit' conflicts for triage are auto-resolved::

    >>> state.set(sharing.RecordSet(set([sharing.model.ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Welcome to Cosmo', u'100 123456789.12 1', Decimal("1164803132"), 0, 0, 0)])), sharing.Diff())
    >>> dSend, dApply, pending = state.merge(sharing.RecordSet(set([sharing.model.ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Welcome to Cosmo', u'100 123456789.13 1', Decimal("1164803132"), 0, 0, 0)])), sharing.Diff(set([sharing.model.ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', sharing.NoChange, sharing.Inherit, sharing.NoChange, sharing.NoChange, sharing.NoChange, sharing.NoChange)])))
    >>> state.updateConflicts(item)
    >>> list(sharing.getConflicts(item))
    [Triage status : Inherit]
    >>> state.autoResolve(sharing.RecordSet(set([sharing.model.ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Welcome to Cosmo', u'100 123456789.13 1', Decimal("1164803132"), 0, 0, 0)])), dApply, dSend)
    >>> t.importRecords(dApply)
    >>> state.updateConflicts(item)
    >>> list(sharing.getConflicts(item))
    []



NoteRecord type
- - - - - - - -

Importing:

    >>> rec = sharing.model.NoteRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         body='This is the body',
    ...         icalUid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         icalProperties=None,
    ...         icalParameters=None,
    ...         icalExtra=None,
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item.itsKind.itsName
    'Note'

    >>> item.body
    u'This is the body'

TODO: icaluid

Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records
    [ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Translator test', '100 -1167792400.00 1', Decimal("1164803131"), 0, 0, 0), ModifiedByRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'', Decimal("1164803131"), 500), DisplayAlarmRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', None, None, None, None), NoteRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'This is the body', u'f230dcd4-7c32-4c3f-908b-d92081cc9a89', Inherit, Inherit, u'')]

TODO: icaluid




TaskRecord type
- - - - - - - -

Importing:

    >>> pim.stamping.has_stamp(item, pim.TaskStamp)
    False

    >>> rec = sharing.model.TaskRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89'
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item.itsKind.itsName
    'Note'

    >>> pim.stamping.has_stamp(item, pim.TaskStamp)
    True

Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records
    [ItemRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'Translator test', '100 -1167792400.00 1', Decimal("1164803131"), 0, 0, 0), ModifiedByRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'', Decimal("1164803131"), 500), DisplayAlarmRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', None, None, None, None), NoteRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'This is the body', u'f230dcd4-7c32-4c3f-908b-d92081cc9a89', Inherit, Inherit, u''), TaskRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89')]


MailMessageRecord type
Importing:

    >>> pim.stamping.has_stamp(item, pim.MailStamp)
    False

    >>> rec = sharing.model.MailMessageRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         messageId = u'1234@test.com',
    ...         headers = u'From: test@test.com\nTo: test1@test.com',
    ...         fromAddress = 'test@test.com',
    ...         toAddress = 'test1@test.com, test2@test.com',
    ...         ccAddress = None,
    ...         bccAddress = None,
    ...         originators = u'Test User',
    ...         dateSent = 'Sat, 31 Mar 2007 00:03:34 +0000',
    ...         inReplyTo = None,
    ...         references = None,
    ...         mimeContent = None,
    ...         rfc2822Message = None,
    ...         previousSender = None,
    ...         replyToAddress = None,
    ...         messageState = 0,
    ... )

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> pim.stamping.has_stamp(item, pim.MailStamp)
    True
    >>> mail = pim.MailStamp(item)
    >>> mail.messageId
    u'1234@test.com'
    >>> mail.headers['From']
    u'test@test.com'
    >>> mail.fromAddress.format()
    u'test@test.com'
    >>> mail.toAddress.first().format()
    u'test1@test.com'
    >>> mail.originators.first().format()
    u'Test User'
    >>> mail.dateSentString
    u'Sat, 31 Mar 2007 00:03:34 +0000'


Exporting:

    >>> t.startExport()
    >>> records = [r for r in t.exportItem(item) if isinstance(r, sharing.model.MailMessageRecord)]
    >>> records
    [MailMessageRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u'1234@test.com', u'From: test@test.com\nTo: test1@test.com', u'test@test.com', u'test1@test.com, test2@test.com', u'', u'', u'Test User', u'Sat, 31 Mar 2007 00:03:34 +0000', None, None, None, None, None, None, 0)]


EventRecord type
- - - - - - - -

Importing:

    >>> pim.stamping.has_stamp(item, pim.EventStamp)
    False
    
    >>> rec = sharing.model.EventRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         dtstart = ';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070201T140000',
    ...         duration = 'PT1H',
    ...         location = 'Nowhere',
    ...         rrule = None,
    ...         exrule = None,
    ...         rdate = None,
    ...         exdate = None,
    ...         status = 'CANCELLED',
    ...         lastPastOccurrence = None,
    ... )

Explain the record:

    >>> with currentview.set(rv):
    ...     for field in sorted(rec.explain()):
    ...         print field[:2]
    (u'Duration', '1:00:00 (hh:mm:ss)')
    (u'Event status', u'FYI')
    (u'Location', u'Nowhere')
    (u'Start time', '2007-02-01 14:00:00-08:00')
    ('exdate', None)
    ('exrule', None)
    ('lastPastOccurrence', None)
    ('rdate', None)
    ('rrule', None)

    >>> rs = sharing.RecordSet([rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> pim.stamping.has_stamp(item, pim.EventStamp)
    True
    >>> event = pim.EventStamp(item)
    >>> event.transparency
    'fyi'
    >>> event.location.displayName
    u'Nowhere'
    >>> event.startTime
    datetime.datetime(2007, 2, 1, 14, 0, tzinfo=<ICUtzinfo: America/Los_Angeles>)
    >>> event.duration
    datetime.timedelta(0, 3600)

Exporting:

    >>> t.startExport()
    >>> records = [r for r in t.exportItem(item) if isinstance(r, sharing.model.EventRecord)]
    >>> records
    [EventRecord('f230dcd4-7c32-4c3f-908b-d92081cc9a89', u';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070201T140000', u'PT1H', u'Nowhere', None, None, None, None, u'CANCELLED', NoChange)]

Recurrence
- - - - -

Importing:
    
    >>> new_rec = sharing.model.EventRecord(
    ...             uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...             dtstart = rec.dtstart,
    ...             duration = rec.duration,
    ...             location = rec.location,
    ...             rrule = 'FREQ=WEEKLY;COUNT=5;BYDAY=TU,TH',
    ...             exrule = None,
    ...             rdate = ';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070223T140000,20070225T140000',
    ...             exdate = ';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070206T140000',
    ...             status = rec.status,
    ...             lastPastOccurrence = None,
    ... )

    >>> rs = sharing.RecordSet([new_rec])

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> [i.day for i in event.createDateUtilFromRule()]
    [1, 8, 13, 15, 23, 25]

Exporting:

    >>> t.startExport()
    >>> allRecords = list(t.exportItem(item))
    >>> records = [r for r in allRecords if isinstance(r, sharing.model.EventRecord)]
    >>> len(records) == 1
    True
    >>> record = records[0]
    >>> record.rrule
    u'FREQ=WEEKLY;COUNT=5;BYDAY=TU,TH'
    >>> record.exrule is None
    True
    >>> record.rdate
    u';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070223T140000,20070225T140000'
    >>> record.exdate
    u';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070206T140000'
    
Triage status isn't meaningful for master events, so it should be NoChange for
the recurrence master.

    >>> itemRecords = [r for r in allRecords if isinstance(r, sharing.model.ItemRecord)]
    >>> len(itemRecords) == 1
    True
    >>> itemRecord = itemRecords[0]
    >>> itemRecord.triage
    NoChange


Modifications
- - - - - - -

    >>> mod_rec = sharing.model.ItemRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89:20070223T220000Z',
    ...         title='Changed title',
    ...         triage='100 -1167792143.00 1',
    ...         createdOn=sharing.Inherit,
    ...         hasBeenSent=sharing.Inherit,
    ...         needsReply=sharing.Inherit,
    ...         read=sharing.Inherit,
    ... )

The explain method should handle Inherit values:

    >>> with currentview.set(rv):
    ...     for field in sorted(mod_rec.explain()):
    ...         print field[:2]
    (u'Created on', u'Inherit')
    (u'Has been read', u'Inherit')
    (u'Has been sent', u'Inherit')
    (u'Needs reply', u'Inherit')
    (u'Title', u'Changed title')
    (u'Triage status', u'Now')
    
Importing:

    >>> rs = sharing.Diff([mod_rec])    

    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> mod = event.getRecurrenceID(event.startTime + timedelta(22))
    >>> mod.itsItem.displayName
    u'Changed title'

    >>> mod.itsItem.triageStatus
    TriageEnum.now

Exporting:

    >>> mod.itsItem.setTriageStatus(pim.TriageEnum.done)
    >>> mod.itsItem.resetAutoTriageOnDateChange()

    >>> t.startExport()
    >>> records = list(t.exportItem(mod.itsItem))
    >>> event_records = [r for r in records if isinstance(r, sharing.model.EventRecord)]
    >>> len(event_records) == 1
    True
    >>> event_record = event_records[0]
    >>> event_record.dtstart
    Inherit
    >>> event_record.duration
    Inherit
    >>> item_records = [r for r in records if isinstance(r, sharing.model.ItemRecord)]
    >>> len(item_records) == 1
    True
    >>> item_record = item_records[0]
    >>> item_record.title
    u'Changed title'
    >>> item_record.triage
    Inherit
    
Custom Reminders
- - - - - - - - 

Importing:

    >>> t.startImport()

    >>> item_rec = sharing.model.ItemRecord(
    ...              uuid='a9b019a4-d995-11db-f269-0016cbca6aed',
    ...              title='Item with reminder',
    ...              triage='200 -1167792143.00 1',
    ...              createdOn=Decimal("1164803131"),
    ...              hasBeenSent=0,
    ...              needsReply=0,
    ...              read=0,
    ... )
    >>> alarm_rec = sharing.model.DisplayAlarmRecord(
    ...               uuid='a9b019a4-d995-11db-f269-0016cbca6aed',
    ...               description="Don't forget!",
    ...               trigger=';VALUE=DATE-TIME:20060304T220000Z',
    ...               duration="PT1H",
    ...               repeat=1,
    ... )

    >>> rs = sharing.Diff([item_rec, alarm_rec])

    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item = rv.findUUID('a9b019a4-d995-11db-f269-0016cbca6aed')
    >>> len(item.reminders)
    1
    >>> item.reminders.first()
    <Reminder (new): ...>
    >>> item.reminders.first().absoluteTime
    datetime.datetime(2006, 3, 4, 14, 0, tzinfo=<ICUtzinfo: America/Los_Angeles>)
    >>> item.reminders.first().description
    u"Don't forget!"
    
Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> len(records)
    3
    >>> records[0]
    ItemRecord('a9b019a4-d995-11db-f269-0016cbca6aed', u'Item with reminder', '200 -1167792143.00 1', Decimal("1164803131"), 0, 0, 0)
    >>> records[1]
    ModifiedByRecord(...)
    >>> records[2]
    DisplayAlarmRecord('a9b019a4-d995-11db-f269-0016cbca6aed', u"Don't forget!", u';VALUE=DATE-TIME:20060304T220000Z', u'PT1H', 1)
    
    >>> del item.reminders.first().duration
    >>> del item.reminders.first().repeat
    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> records[2]
    DisplayAlarmRecord('a9b019a4-d995-11db-f269-0016cbca6aed', u"Don't forget!", u';VALUE=DATE-TIME:20060304T220000Z', None, None)
    

Relative Reminders
- - - - - - - - -

Importing:

    >>> item_rec = sharing.model.ItemRecord(
    ...              uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...              title='Event Item with reminder',
    ...              triage='200 -1167792996.00 1',
    ...              createdOn=Decimal("1164805552"),
    ...              hasBeenSent=0,
    ...              needsReply=1,
    ...              read=0,
    ... )
    >>> note_rec = sharing.model.NoteRecord(
    ...         uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...         body='This is the body',
    ...         icalUid=None,
    ...         icalExtra=None,
    ...         icalProperties=None,
    ...         icalParameters=None,
    ... )
    >>> event_rec = sharing.model.EventRecord(
    ...         uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...         dtstart = ';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070516T180000',
    ...         duration = 'PT1H',
    ...         location = 'Nowhere',
    ...         rrule = None,
    ...         exrule = None,
    ...         rdate = None,
    ...         exdate = None,
    ...         status = 'CONFIRMED',
    ...         lastPastOccurrence = None,    
    ... )
    >>> relative_alarm_rec = sharing.model.DisplayAlarmRecord(
    ...         uuid='800644b6-dd73-11db-f79a-0016cbca6aed',
    ...         description="Time to go!",
    ...         trigger='-PT5M',
    ...         duration=sharing.Inherit,
    ...         repeat=sharing.Inherit,
    ... )
    >>> rs = sharing.Diff([item_rec, note_rec, event_rec,
    ...                         relative_alarm_rec])

    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> item = rv.findUUID('800644b6-dd73-11db-f79a-0016cbca6aed')
    >>> pim.has_stamp(item, pim.EventStamp)
    True
    >>> len(item.reminders)
    1
    >>> item.reminders.first()
    <RelativeReminder (new): ...>
    >>> item.reminders.first().delta
    datetime.timedelta(-1, 86100)
    >>> item.reminders.first().description
    u'Time to go!'
    
Exporting:

    >>> t.startExport()
    >>> records = list(t.exportItem(item))
    >>> len(records)
    5
    >>> records[0]
    ItemRecord('800644b6-dd73-11db-f79a-0016cbca6aed', u'Event Item with reminder', '200 -1167792996.00 1', Decimal("1164805552"), 0, 1, 0)
    >>> records[1]
    ModifiedByRecord(...)
    >>> records[2]
    DisplayAlarmRecord('800644b6-dd73-11db-f79a-0016cbca6aed', u'Time to go!', u'-PT5M', None, None)
    >>> records[3]
    NoteRecord('800644b6-dd73-11db-f79a-0016cbca6aed', ...)
    >>> records[4]
    EventRecord('800644b6-dd73-11db-f79a-0016cbca6aed', ...)


Accounts
- - - -

PasswordRecord type
Importing:

    >>> from binascii import unhexlify
    >>> from i18n.tests import uw
    >>> from osaf.framework.twisted import waitForDeferred
    >>> from osaf.framework.password import Password
    >>> pwr = sharing.model.PasswordRecord(
    ...         uuid='ff58a5bc-e72b-44bc-8503-887970ecac6f',
    ...         ciphertext=unhexlify('908ed5801146c55f7305dd8a07fa468f68fd0e3e7e075c6e42a9f922f8f5b461a2d32cc2eda4130085fa27c2a124d89f6e1c004245f3a1f9f101cb9bb30b6bcfe8685d01bffa2e659f567c9d1c44d564e87b469884de3dd070e9611be4666391'),
    ...         iv=unhexlify('2a4c722617afd356bc0dc9c2cb26aa0013fbaf81928769485ed7c01d333f2952'),
    ...         salt=unhexlify('0ee664ffa11c6856d5c6dc553413b6a3ee7d43b3b2c4252c1b8a4ca308387b9c'),
    ... )
    >>> pwr2 = sharing.model.PasswordRecord(
    ...         uuid='ff58a5bc-e72b-44bc-8503-887970ecac6e',
    ...         ciphertext='',
    ...         iv='',
    ...         salt='',
    ... )
    >>> rs = sharing.Diff([pwr, pwr2])
    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    Normal:
    >>> pw = rv.findUUID(pwr.uuid)
    >>> waitForDeferred(pw.decryptPassword(uw('M0r3 s3cr3t'))) == uw('my secr3t p4ssw0rd')
    True

    Uninitialized:
    >>> pw2 = rv.findUUID(pwr2.uuid)
    >>> waitForDeferred(pw2.initialized())
    False

Exporting:

    Normal:
    >>> t.startExport()
    >>> list(t.exportItem(pw))
    [PasswordRecord('ff58a5bc-e72b-44bc-8503-887970ecac6f', '...', '...', '...')]

    Uninitialized:
    >>> list(t.exportItem(Password(itsView=rv)))
    [PasswordRecord('...', '', '', '')]


PasswordPrefsRecord type
Importing:

    >>> from application import schema
    >>> dummy = schema.ns("osaf.framework.password",
    ...                   rv).passwordPrefs.dummyPassword
	>>> dummy.ciphertext, dummy.iv, dummy.salt = waitForDeferred(pw.recordTuple())
    >>> prefsr = sharing.model.PasswordPrefsRecord(
    ...            dummyPassword='dd555441-9ddc-416c-b55a-77b073c7bd15',
    ...            masterPassword=1,
    ...            timeout=10,
    ...            protect=0
    ... )
    >>> rs = sharing.Diff([prefsr])
    >>> t.startImport()
    >>> t.importRecords(rs)
    >>> t.finishImport()

    >>> dummy = schema.ns("osaf.framework.password",
    ...                   rv).passwordPrefs.dummyPassword
    >>> waitForDeferred(dummy.decryptPassword(uw('M0r3 s3cr3t'))) == uw('my secr3t p4ssw0rd')
    True
    >>> prefs = schema.ns("osaf.framework.MasterPassword",
    ...                   rv).masterPasswordPrefs
    >>> prefs.masterPassword
    True
    >>> prefs.timeout
    10
    >>> hasattr(prefs, "protect")
    False
    
Exporting:

    >>> t.startExport()

    >>> list(t.export_password_prefs())
    [PasswordPrefsRecord('dd555441-9ddc-416c-b55a-77b073c7bd15', 1, 10, 0), PasswordRecord('dd555441-9ddc-416c-b55a-77b073c7bd15', '...', '...', '...')]


The following are covered in TestDumpReload.py:

MailAccountRecord, IMAPAccountFoldersRecord, SMTPAccountRecord,
SMTPAccountQueueRecord, IMAPAccountRecord, POPAccountRecord,
IMAPFolderRecord, MailPrefsRecord, UpdateCheckPrefsRecord, ClientIDRecord



Verify the special behavior in collection membership record, where a collection
is specified either by well-known name, by UUID, or by repository path::

    >>> d = sharing.translator.DumpTranslator(rv)

By well-known name::
    >>> p = Parcel(itsParent=rv.findPath("//parcels/osaf"), itsName="app")
    >>> sidebar = pim.ListCollection(itsParent=p, itsName="sidebarCollection")
    >>> note = pim.Note(itsView=rv)
    >>> rec = sharing.model.CollectionMembershipRecord(
    ...         collectionID="@sidebar",
    ...         itemUUID=note.itsUUID,
    ...         index=0,
    ... )
    >>> rs = sharing.Diff([rec])
    >>> d.startImport()
    >>> d.importRecords(rs)
    >>> d.finishImport()
    >>> note in sidebar
    True

    >>> list(d.export_collection_memberships(sidebar))
    [CollectionMembershipRecord(u'@sidebar', '...', 0)]

By UUID::
    >>> parcels = rv.findPath("//parcels")
    >>> collection = pim.SmartCollection(itsParent=parcels, itsName="testColl")
    >>> note = pim.Note(itsView=rv)
    >>> rec = sharing.model.CollectionMembershipRecord(
    ...         collectionID=collection.itsUUID.str16(),
    ...         itemUUID=note.itsUUID,
    ...         index=0,
    ... )
    >>> rs = sharing.Diff([rec])
    >>> d.startImport()
    >>> d.importRecords(rs)
    >>> d.finishImport()
    >>> note in collection
    True

By path (although this likely won't be used)::
    >>> note = pim.Note(itsView=rv)
    >>> rec = sharing.model.CollectionMembershipRecord(
    ...         collectionID='//parcels/testColl',
    ...         itemUUID=note.itsUUID,
    ...         index=1,
    ... )
    >>> rs = sharing.Diff([rec])
    >>> d.startImport()
    >>> d.importRecords(rs)
    >>> d.finishImport()
    >>> note in collection
    True







Verify the special converters we put in place for turning None to NoChange
for event status, and empty string to NoChange for triage are working::

    >>> rec = sharing.model.ItemRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         title='triage test',
    ...         triage='',
    ...         createdOn=Decimal("1164803131"),
    ...         hasBeenSent=0,
    ...         needsReply=0,
    ...         read=0,
    ... )
    >>> rec.triage
    NoChange

    >>> rec = sharing.model.EventRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         dtstart = ';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070201T140000',
    ...         duration = 'PT1H',
    ...         location = 'Nowhere',
    ...         rrule = None,
    ...         exrule = None,
    ...         rdate = None,
    ...         exdate = None,
    ...         status = None,
    ...         lastPastOccurrence = None,
    ... )
    >>> rec.status
    NoChange

    >>> rec = sharing.model.EventRecord(
    ...         uuid='f230dcd4-7c32-4c3f-908b-d92081cc9a89',
    ...         dtstart = ';VALUE=DATE-TIME;TZID=America/Los_Angeles:20070201T140000',
    ...         duration = None,
    ...         location = 'Nowhere',
    ...         rrule = None,
    ...         exrule = None,
    ...         rdate = None,
    ...         exdate = None,
    ...         status = None,
    ... )
    >>> rec.duration
    'PT0S'






Verify that invalid triage codes are converted to "NOW"::

    >>> t.startImport()

    >>> item_rec = sharing.model.ItemRecord(
    ...              uuid='a9b019a4-d995-11db-f269-0016cbca6aea',
    ...              title='Bogus triage',
    ...              triage='-1 0 1',
    ...              createdOn=Decimal("1164803131"),
    ...              hasBeenSent=0,
    ...              needsReply=0,
    ...              read=0,
    ... )
    >>> rs = sharing.Diff([item_rec])
    >>> t.importRecords(rs)
    >>> t.finishImport()
    >>> item = rv.findUUID('a9b019a4-d995-11db-f269-0016cbca6aea')
    >>> item.triageStatus
    TriageEnum.now





BackupOnQuitPrefsRecord type tests are in TestDumpReload.py
