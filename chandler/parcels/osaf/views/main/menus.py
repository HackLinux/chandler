#   Copyright (c) 2003-2007 Open Source Applications Foundation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import logging
from application.Plugins import PluginMenu
from application import schema
import wx
from colorsys import hsv_to_rgb
from osaf.pim.structs import ColorType
from osaf.framework.blocks import ColorEvent

def makeColorMenuItems (parcel, theClass, hues, prefix=""):
    """
    dynamically creates an array of type 'theClass' based on a list of colors
    """
    menuItems = []
    
    # make sure that all the events end up in the main parcel
    parcelLocation = "osaf.views.main"
    mainParcel = schema.parcel_for_module (parcelLocation, parcel.itsView)
    nameSpace = schema.ns (parcelLocation, parcel.itsView)

    for shortName, title, hue in hues:
        
        eventName = shortName + 'CollectionColor'
        colorEvent = getattr (nameSpace, eventName, None)
        if colorEvent is None:
            rgb = hsv_to_rgb(hue/360.0, 0.5, 1.0)
            rgb = [int(c*255) for c in rgb] + [255]
    
            colorEvent = ColorEvent.template(
                eventName,
                dispatchToBlockName = 'Sidebar',
                color = ColorType (*rgb),
                methodName = 'onCollectionColorEvent').install (mainParcel)

        menuItem = theClass.template(
            prefix + shortName + 'ColorItem',
            title = title, # XXX No keyboard shortcuts
            icon = shortName + "MenuIcon",
            menuItemKind = "Check",
            event = colorEvent)
        menuItems.append (menuItem)

    return menuItems

def makeMainMenus(parcel):

    from osaf.framework.blocks import Menu, MenuItem, MenuBar, ColorEvent
    from osaf.framework.blocks.calendar import VisibleHoursEvent
    from i18n import ChandlerMessageFactory as _
    from osaf import messages, pim
    from osaf import usercollections
    from itertools import chain

    if '__WXMAC__' in wx.PlatformInfo:
        platform_remove = _(u'Back')
        platform_delete = _(u'Ctrl+Back')
    else:
        platform_remove = _(u'Del')
        platform_delete = _(u'Ctrl+Del')

    
    def makeVisibleHourMenuItems(parcel):
        """
        Create the 'Visible Hours' submenu. Should look like:
        
        Automatic
        ---------
        5 hours
        6 hours

        etc..
        """
        menuItems = []
        
        # include '-1' in the list of hours
        for hour in chain([-1], xrange(5, 13), [18], [24]):

            # create the event that will fire. Note that all events on
            # the same method
            eventName = 'VisibleHour' + str(hour)
            event = \
                VisibleHoursEvent.template(eventName,
                                           methodName = 'onVisibleHoursEvent',
                                           visibleHours = hour)
            event = event.install(parcel)

            # now create the menuitem itself
            if hour == -1:
                title = _(u"&Automatic")
            else:
                # XXX The keyboard shortcut is implemented for some values,
                # XXX but is somewhat questionable if we should do even this,
                # XXX because to do this in a really localizable way we'd
                # XXX need to do this with a table with all the values.
                title = _(u"%(amp)s%(hours)s hours") % {'amp': '&' if 2 < hour < 11  or hour == 24 else '', 'hours': hour}
                
            menuItem = MenuItem.template(eventName + 'Item',
                                         title = title,
                                         menuItemKind = "Check",
                                         event = event)
            menuItems.append(menuItem)

            # add a separator after 'Automatic'
            if hour == -1:
                menuItem = MenuItem.template('VisibleHourSeparator',
                                             menuItemKind="Separator")
                menuItems.append(menuItem)

        return menuItems
                                         

    repositoryView = parcel.itsView
    main = schema.ns("osaf.views.main", repositoryView)
    globalBlocks = schema.ns("osaf.framework.blocks", repositoryView)
    calBlocks = schema.ns("osaf.framework.blocks.calendar", repositoryView)

    fileMenu =  Menu.template('FileMenu',
                title = _(u'&File'),
                childBlocks = [
                    MenuItem.template('ImportIcalendarItem',
                        event = main.ImportIcalendar,
                        title = _(u'&Import...'),
                        helpString = _(u'Import iCalendar file')),
                    MenuItem.template('ExportIcalendarItem',
                        event = main.ExportIcalendar,
                        title = _(u'&Export...'),
                        helpString = _(u'Export Calendar Events to an iCalendar file')),
                    MenuItem.template('DumpToFileItem',
                        event = main.DumpToFile,
                        title = _(u'&Dump items to file...'),
                        helpString = _(u'Dump items to file')),
                    MenuItem.template('ReloadFromFileItem',
                        event = main.ReloadFromFile,
                        title = _(u'&Reload items from file...'),
                        helpString = _(u'Reload items from file')),
                    MenuItem.template('FileSeparator2',
                        menuItemKind = 'Separator'),
                    MenuItem.template('PrefsAccountsItem',
                        event = main.EditAccountPreferences,
                        title = _(u'&Accounts...'),
                        helpString = messages.ACCOUNT_PREFERENCES),
                    MenuItem.template('ProtectPasswordsItem',
                        event = main.ProtectPasswords,
                        title = _(u'Protect Pass&words...'),
                        helpString = _(u'Encrypt account passwords with the help of master password')),
                    Menu.template('SyncMenu',
                        title = _(u'S&ync'),
                        childBlocks = [
                            MenuItem.template('SyncCollectionItem',
                                event = main.SyncCollection,
                                title = _(u'Sync'),
                                helpString = _(u"Synchronize a shared collection")),
                            MenuItem.template('SyncAllItem',
                                event = main.SyncAll,
                                title = _(u"&All"),
                                helpString = _(u'Sync All')),
                            MenuItem.template('SyncIMAPItem',
                                event = main.GetNewMail,
                                title = _(u'&Mail'),
                                helpString = _(u'Sync Mail')),
                            MenuItem.template('SyncWebDAVItem',
                                event = main.SyncWebDAV,
                                title = _(u'&Shares'),
                                helpString = _(u'Sync Shares')),
                            MenuItem.template('SyncPrefsItem',
                                event = main.SyncPrefs,
                                title = _(u'Set Auto-sync inter&vals...'),
                                helpString = _(u'Change synchronization preferences')),
                            ]), # Menu SyncMenu
                    Menu.template('OfflineMenu',
                        title = _(u'Suspend Syncin&g'),
                        childBlocks = [
                            MenuItem.template('TakeOnlineOfflineItem',
                                event = main.TakeOnlineOffline,
                                title = _(u'Suspend syncing'),
                                menuItemKind = 'Check',
                                helpString = _(u"Toggle the collection's online status")),
                            MenuItem.template('AllOfflineItem',
                                event = main.TakeAllOnlineOffline,
                                menuItemKind = 'Check',
                                title = _(u'&All'),
                                helpString = _(u'Go offline')),
                            MenuItem.template('TakeMailOnlineOfflineItem',
                                event = main.TakeMailOnlineOffline,
                                menuItemKind = 'Check',
                                title = _(u'&Mail'),
                                helpString = _(u'Toggle the mail online status')),
                            MenuItem.template('SharesOfflineItem',
                                event = main.TakeSharesOnlineOffline,
                                title = _(u'&Shares'),
                                helpString = _(u'Take shares offline')),
                            ]), # Menu OfflineMenu              
                    MenuItem.template('FileSeparator3',
                        menuItemKind = 'Separator'),
                    MenuItem.template('EnableTimezonesItem',
                        event = main.EnableTimezones,
                        title = _(u'Use time &zones'),
                        menuItemKind = 'Check',
                        helpString = _(u'Hide or show time zones')),
                    MenuItem.template('FileSeparator4',
                        menuItemKind = 'Separator'),
                    MenuItem.template('PrintPreviewItem',
                        event = globalBlocks.PrintPreview,
                        title = _(u'Print Pre&view'),
                        wxId = wx.ID_PREVIEW),
                    MenuItem.template('PageSetupItem',
                        event = globalBlocks.PageSetup,
                        title = _(u'Page Set&up...'),
                        accel = _(u'Shift+Ctrl+P')),
                    MenuItem.template('PrintItem',
                        event = globalBlocks.Print,
                        title = _(u'&Print...'),
                        accel = _(u'Ctrl+P'),
                        helpString = _(u'Print the current calendar'),
                        wxId = wx.ID_PRINT),
                    MenuItem.template('FileSeparator5',
                        menuItemKind = 'Separator'),
                    MenuItem.template('CommitView',
                        event = globalBlocks.CommitView,
                        title = _(u'&Save changes'),
                        accel = _(u'Ctrl+S'),
                        wxId = wx.ID_SAVE),
                    ])

    if wx.Platform != '__WXMAC__':
        fileMenu.attrs['childBlocks'].append(MenuItem.template('QuitItem',
                                                        event=globalBlocks.Quit,
                                                        title = _(u'&Quit'),
                                                        accel = _(u'Ctrl+Q'),
                                                        helpString = _(u'Quit Chandler'),
                                                        wxId = wx.ID_EXIT))

    MenuBar.template('MenuBar',
        childBlocks = [
            fileMenu,
            Menu.template('EditMenu',
                title = _(u'&Edit'),
                childBlocks = [
                    MenuItem.template('UndoItem',
                        event = globalBlocks.Undo,
                        title = messages.UNDO,
                        accel = _(u'Ctrl+Z'),
                        helpString = _(u"Can't Undo"),
                        wxId = wx.ID_UNDO),
                    MenuItem.template('RedoItem',
                        event = globalBlocks.Redo,
                        title = messages.REDO,
                        accel = _(u'Ctrl+Y'),
                        helpString = _(u"Can't Redo"),
                        wxId = wx.ID_REDO),
                    MenuItem.template('EditSeparator1',
                        menuItemKind = 'Separator'),
                    MenuItem.template('CutItem',
                        event = globalBlocks.Cut,
                        title = messages.CUT,
                        accel = _(u'Ctrl+X'),
                        wxId = wx.ID_CUT),
                    MenuItem.template('CopyItem',
                        event = globalBlocks.Copy,
                        title = messages.COPY,
                        accel = _(u'Ctrl+C'),
                        wxId = wx.ID_COPY),
                    MenuItem.template('PasteItem',
                        event = globalBlocks.Paste,
                        title = messages.PASTE,
                        accel = _(u'Ctrl+V'),
                        wxId = wx.ID_PASTE),
                    MenuItem.template('SelectAllItem',
                        event = globalBlocks.SelectAll,
                        title = messages.SELECT_ALL,
                        accel = _(u'Ctrl+A'),
                        helpString = _(u'Select all'),
                        wxId = wx.ID_SELECTALL),
                    MenuItem.template('EditSeparator2',
                        menuItemKind = 'Separator'),
                    MenuItem.template('SearchItem',
                        event = main.Search,
                        title = _(u'&Find'),
                        accel = _(u'Ctrl+F'),
                        helpString = _(u'Search using the Quick Entry field'),
                        wxId = wx.ID_FIND),
                    ]), # Menu EditMenu
            Menu.template('ViewMenu',
                title = _(u'&View'),
                childBlocks = [
                    MenuItem.template('ApplicationBarAllMenu',
                        event = main.ApplicationBarAll,
                        title = _(u'&All'),
                        menuItemKind = 'Check',
                        helpString = _(u'View all items')),
                    MenuItem.template('ApplicationBarMailMenu',
                        event = main.ApplicationBarMail,
                        title = _(u'&Mail'),
                        menuItemKind = 'Check',
                        helpString = _(u'View messsages')),
                    MenuItem.template('ApplicationBarTaskMenu',
                        event = main.ApplicationBarTask,
                        title = _(u'&Tasks'),
                        menuItemKind = 'Check',
                        helpString = _(u'View tasks')),
                    MenuItem.template('ApplicationBarEventMenu',
                        event = main.ApplicationBarEvent,
                        title = _(u'&Calendar'),
                        menuItemKind = 'Check',
                        helpString = _(u'View events')),
                    MenuItem.template('ViewSeparator0',
                        menuItemKind = 'Separator'),
                    MenuItem.template('ViewAsDashboardItem',
                        event = main.ViewAsDashboard,
                        title = _(u'Triage Ta&ble view'),
                        menuItemKind = 'Check',
                        helpString = _(u'Display data in a Dashboard view')),
                    MenuItem.template('ViewAsCalendarItem',
                        event = main.ViewAsCalendar,
                        title = _(u'Cal&endar view'),
                        menuItemKind = 'Check',
                        helpString = _(u'Display data in a Calendar view')),
                    MenuItem.template('WeekViewItem',
                        event = calBlocks.WeekView,
                        title = _(u'&Week View'),
                        accel = _(u'Ctrl+2'),
                        helpString = _(u'Show the calendar in week view')),
                    MenuItem.template('DayViewItem',
                        event = calBlocks.DayView,
                        title = _(u'&Day View'),
                        accel = _(u'Ctrl+1'),
                        helpString = _(u'Show the calendar in day view')),
                    MenuItem.template('ViewSeparator1',
                        menuItemKind = 'Separator'),
                    MenuItem.template('TriageMenu',
                        event = main.Triage,
                        title = _(u'T&riage'),
                        accel = _(u'F5'),
                        helpString = _(u'File into Triage sections')),
                    MenuItem.template('ViewSeparator1.5',
                        menuItemKind = 'Separator'),
                    MenuItem.template('GoToNextWeek',
                        event = calBlocks.GoToNext,
                        title = _(u'&Next Week'),
                        accel = _(u'Ctrl+Shift+Right'),
                        helpString = _(u'Jump to the next week')),
                    MenuItem.template('GoToPrevWeek',
                        event = calBlocks.GoToPrev,
                        title = _(u'&Previous Week'),
                        accel = _(u'Ctrl+Shift+Left'),
                        helpString = _(u'Jump to the previous week')),
                    MenuItem.template('GoToDate',
                        event = calBlocks.GoToDate,
                        title = _(u'&Jump to date...'),
                        accel = _(u'Ctrl+G'),
                        helpString = _(u'Navigate to a specific date')),
                    MenuItem.template('GoToToday',
                        event = calBlocks.GoToToday,
                        title = _(u'Jump to t&oday'),
                        accel = _(u'Ctrl+T'),
                        helpString = _(u'Navigate to today\'s date')),
                    MenuItem.template('ViewSeparator2',
                                      menuItemKind = 'Separator'),
                    Menu.template('VisibleHoursMenu',
                                  title = _(u'&Visible hours'),
                                  childBlocks = \
                                  makeVisibleHourMenuItems(parcel)),
                    Menu.template('ViewConfigureWindow',
                        title = _(u'Show/Hide'),
                        helpString = _(u'Configure the window'),
                        childBlocks = [
                            MenuItem.template('ViewToolBarItem',
                                              event = main.ShowHideApplicationBar,
                                              title = _(u'&Toolbar'),
                                              menuItemKind = 'Check',
                                              helpString = _(u'Show or hide the Toolbar')),
                            MenuItem.template('ViewSideBarItem',
                                              event = main.ShowHideSidebar,
                                              title = _(u'&Sidebar'),
                                              menuItemKind = 'Check',
                                              helpString = _(u'Show or hide the Sidebar')),
                            MenuItem.template('ViewMiniCalItem',
                                              title = _(u'&Mini-calendar'),
                                              menuItemKind = 'Check',
                                              helpString = _(u'Show or hide the Mini-calendar')),
                            MenuItem.template('ViewDetailItem',
                                              title = _(u'&Detail view'),
                                              menuItemKind = 'Check',
                                              helpString = _(u'Show or hide the Detail view')),
                            MenuItem.template('ViewStatusBarItem',
                                              event = main.ShowHideStatusBar,
                                              title = _(u'Status &Bar'),
                                              menuItemKind = 'Check',
                                              helpString = _(u'Show or hide the Status bar')),
                            ]),
                    ]), # Menu ViewMenu
            Menu.template('ItemMenu',
                title = _(u'&Item'),
                childBlocks = [
                    Menu.template('NewItemMenu',
                        title = _(u'&New'),
                        helpString = _(u'Create a new Content Item'),
                        childBlocks = [
                            MenuItem.template('NewItemItem',
                                event = main.NewItem,
                                title = _(u'Ne&w'),
                                accel = _(u'Ctrl+N'),
                                helpString = _(u'Create a new item'),
                                wxId = wx.ID_NEW),
                            MenuItem.template('NewItemSeparator1',
                                menuItemKind = 'Separator'),
                            MenuItem.template('NewNoteItem',
                                event = main.NewNote,
                                title = _(u'&Note'),
                                accel = _(u'Ctrl+Shift+N'),                                
                                helpString = _(u'Create a new Note')),
                            MenuItem.template('NewMessageItem',
                                event = main.NewMailMessage,
                                title = _(u'&Message'),
                                accel = _(u'Ctrl+Shift+M'),
                                helpString = _(u'Create a new Message')),
                            MenuItem.template('NewTaskItem',
                                event = main.NewTask,
                                title = _(u'&Task'),
                                accel = _(u'Ctrl+Shift+T'),
                                helpString = _(u'Create a new Task')),
                            MenuItem.template('NewEventItem',
                                event = main.NewCalendar,
                                title = _(u'&Event'),
                                accel = _(u'Ctrl+Shift+E'),
                                helpString = _(u'Create a new Event')),
                            ]), # Menu NewItemMenu
                    MenuItem.template('RemoveItem',
                        event = globalBlocks.Remove,
                        title = _(u'Remo&ve'),
                        accel = platform_remove,                        
                        helpString = _(u'Remove the current selection from the current collection'),
                        wxId = wx.ID_REMOVE),
                    MenuItem.template('DeleteItem',
                        event = main.Delete,
                        title = _(u'&Delete'),
                        accel = platform_delete,
                        helpString = _(u'Move the current selection to the trash'),
                        wxId = wx.ID_DELETE),
                    MenuItem.template('ItemSeparator1',
                        menuItemKind = 'Separator'),
                    MenuItem.template('StampMessageItem',
                        event = main.FocusStampMessage,
                        title = _(u"&Address item"),
                        toggleTitle = _(u"Remove &addresses"),
                        helpString = messages.STAMP_MAIL_HELP),
                    MenuItem.template('StampTaskItem',
                        event = main.FocusStampTask,
                        title = _(u"Add to &Task list"),
                        toggleTitle = _(u"Remove from &Task list"),
                        helpString = messages.STAMP_TASK_HELP),
                    MenuItem.template('StampEventItem',
                        event = main.FocusStampCalendar,
                        title = _(u"Add to &Calendar"),
                        toggleTitle = _(u"Remove from &Calendar"),
                        helpString = messages.STAMP_CALENDAR_HELP),
                    MenuItem.template('ItemSeparator2',
                        menuItemKind = 'Separator'),
                    MenuItem.template('SendMessageItem',
                        event = main.SendShareItem,
                        title = _(u'&Send'),
                        helpString = _(u'Send the selected Mail Message')),
                    MenuItem.template('ReplyMessageItem',
                        event = main.ReplyMessage,
                        title = _('&Reply'),
                        helpString = _(u'Reply help message')),
                    MenuItem.template('ReplyAllMessageItem',
                        event = main.ReplyAllMessage,
                        title = _('Repl&yAll'),
                        helpString = _(u'Reply all help message')),
                    MenuItem.template('ForwardMessageItem',
                        event = main.ForwardMessage,
                        title = _('For&ward'),
                        helpString = _(u'Forward help message')),
                    MenuItem.template('ItemSeparator3',
                        menuItemKind = 'Separator'),
                    MenuItem.template('NeverShareItem',
                        event = main.FocusTogglePrivate,
                        title = _(u"Never s&hare this item"),
                        menuItemKind = 'Check',
                        helpString = _(u'Mark the selected item as private, so it will not be shared')),
                    ]), # Menu ItemMenu
            Menu.template('CollectionMenu',
                title = _(u'&Collection'),
                childBlocks = [
                    MenuItem.template('NewCollectionItem',
                        event = main.NewCollection,
                        eventsForNamedLookup = [main.NewCollection],
                        title = _(u'&New'),
                        helpString = _(u'Create a new Collection')),
                    MenuItem.template('CollectionSeparator1',
                        menuItemKind = 'Separator'),
                    MenuItem.template('CollectionRenameItem',
                        event = main.RenameCollection,
                        title = _(u'&Rename'),
                        helpString = _(u'Rename the selected collection')),
                    MenuItem.template('CollectionDuplicateItem',
                        event = main.DuplicateSidebarSelection,
                        title = _(u'Dup&licate'),
                        helpString = _(u'Duplicate the selected collection')),
                    MenuItem.template('CollectionDeleteItem',
                        event = main.DeleteCollection,
                        title = _(u'&Delete'),
                        helpString = _(u'Move the current selection to the trash')),
                    MenuItem.template('CollectionEmptyTrashItem',
                        event = main.EmptyTrash,
                        title = _(u'&Empty Trash'),
                        helpString = _(u'Remove all items from the Trash collection')),
                    MenuItem.template('CollectionSeparator2',
                        menuItemKind = 'Separator'),
                    Menu.template('CollectionColorMenu',
                        title = _(u'&Calendar Color'),
                        childBlocks = makeColorMenuItems(parcel,
                                                            MenuItem,
                                                            usercollections.collectionHues)),
                    MenuItem.template('CollectionSeparator3',
                        menuItemKind = 'Separator'),
                    MenuItem.template('CollectionToggleMineItem',
                        event = main.ToggleMine,
                        title = _(u'&Keep out of Dashboard'),
                        menuItemKind = 'Check',
                        helpString = _(u'Place collection in or out of Dashboard')),
                    ]), # Menu CollectionMenu
            Menu.template('ShareMenu',
                title = _(u'&Share'),
                childBlocks = [
                    MenuItem.template('SubscribeToCollectionItem',
                        event = main.SubscribeToCollection,
                        title = _(u'&Subscribe...'),
                        helpString = _(u'Subscribe to a published collection')),
                    MenuItem.template('UnsubscribeCollectionItem',
                        event = main.UnsubscribeCollection,
                        title = _(u'&Unsubscribe'),
                        helpString = _(u'Stop sharing the selected collection')),
                    MenuItem.template('PublishCollectionItem',
                        event = main.PublishCollection,
                        title = _(u'&Publish...'),
                        helpString = _(u'Publish a collection')),
                    MenuItem.template('UnpublishCollectionItem',
                        event = main.UnpublishCollection,
                        title = _(u'U&npublish'),
                        helpString = _(u'Stop sharing the selected collection')),
                    MenuItem.template('ManageSidebarCollectionItem',
                        event = main.ManageSidebarCollection,
                        title = _(u'&Manage...'),
                        helpString = _(u'Manage the selected collection')),
                    MenuItem.template('ShareSeparator2',
                        menuItemKind = 'Separator'),
                    MenuItem.template('CopyCollectionURLItem',
                        event = main.CopyCollectionURL,
                        title = _(u'&Copy ticket URLs to clipboard'),
                        helpString = _(u"Copy the selected collection's URL(s) to the Clipboard")),
                    ]), # Menu ShareMenu
            Menu.template('ExperimentalMenu',
                title = _(u'Demo'),
                childBlocks = [
                    ]), # Menu ExperimentalMenu
            Menu.template('ToolsMenu',
                title = _(u'&Tools'),
                childBlocks = [
                    MenuItem.template('ActivateWebserverItem',
                        event = main.ActivateWebserver,
                        title = u'Start &webserver',
                        helpString = u'Activates the built-in webserver at localhost:1888'),
                    Menu.template('LoggingMenu',
                        title=u'&Logging',
                        childBlocks = [
                            MenuItem.template('ShowLogWindowItem',
                                event = main.ShowLogWindow,
                                title = u'Log &window...',
                                helpString = u'Displays the contents of chandler.log'),
                            Menu.template('LoggingLevelMenu',
                                title = u'Logging l&evel',
                                helpString = u'Change logging level',
                                childBlocks = [
                                    MenuItem.template('LoggingLevelCriticalMenuItem',
                                        event = main.SetLoggingLevelCritical,
                                        title = u'&Critical',
                                        menuItemKind = 'Check',
                                        helpString = u'Set logging level to Critical'),
                                    MenuItem.template('LoggingLevelErrorMenuItem',
                                        event = main.SetLoggingLevelError,
                                        title = u'&Error',
                                        menuItemKind = 'Check',
                                        helpString = u'Set logging level to Error'),
                                    MenuItem.template('LoggingLevelWarningMenuItem',
                                        event = main.SetLoggingLevelWarning,
                                        title = u'&Warning',
                                        menuItemKind = 'Check',
                                        helpString = u'Set logging level to Warning'),
                                    MenuItem.template('LoggingLevelInfoMenuItem',
                                        event = main.SetLoggingLevelInfo,
                                        title = u'&Info',
                                        menuItemKind = 'Check',
                                        helpString = u'Set logging level to Info'),
                                    MenuItem.template('LoggingLevelDebugMenuItem',
                                        event = main.SetLoggingLevelDebug,
                                        title = u'&Debug',
                                        menuItemKind = 'Check',
                                        helpString = u'Set logging level to Debug'),
                                    ]), # Menu LoggingLevelMenu
                            ]), # Menu LoggingMenu
                    Menu.template('SaveRestoreMenu',
                        title = u'&Save and Restore',
                        childBlocks = [
                            MenuItem.template('BackupRepository',
                                event = globalBlocks.BackupRepository,
                                title = _(u'&Backup data...')),
                            MenuItem.template('RestoreRepository',
                                event = globalBlocks.RestoreRepository,
                                title = _(u'&Restore data...')),
                            MenuItem.template('ToolsRestoreSeparator1',
                                menuItemKind = 'Separator'),
                            MenuItem.template('SaveSettingsItem',
                                event = main.SaveSettings,
                                title = u'Sa&ve settings...',
                                helpString = u'Saves your accounts and shares'),
                            MenuItem.template('RestoreSettingsItem',
                                event = main.RestoreSettings,
                                title = u'Res&tore settings...',
                                helpString = u'Restores your accounts and shares'),
                            MenuItem.template('ToolsRestoreSeparator2',
                                menuItemKind = 'Separator'),
                            MenuItem.template('RestoreSharesItem',
                                event = main.RestoreShares,
                                title = _(u'Restore published s&hares...'),
                                helpString = _(u'Restore previously published shares')),
                        ]), # Menu SaveRestoreMenu
                    Menu.template('RepositoryTestMenu',
                        title=u'&Repository',
                        helpString=u'Repository tools',
                        childBlocks = [
                            MenuItem.template('CheckRepositoryItem',
                                event = main.CheckRepository,
                                title = u'&Check',
                                helpString = u'run check() on the main view'),
                            MenuItem.template('CheckAndRepairRepositoryItem',
                                event = main.CheckAndRepairRepository,
                                title = u'Check and &Repair',
                                helpString = u'run check(True) on the main view'),
                            MenuItem.template('CompactRepositoryItem',
                                event = main.CompactRepository,
                                title = u'C&ompact',
                                helpString = u'compact the repository'),
                            MenuItem.template('IndexRepositoryItem',
                                event = main.IndexRepository,
                                title = u'&Index',
                                helpString = u'tickle the indexer'),
                            MenuItem.template('ToolsRepositorySeparator1',
                                menuItemKind = 'Separator'),
                            MenuItem.template('NewRepositoryItem',
                                event = main.CreateRepository,
                                title = _(u'&New...')),
                            MenuItem.template('SwitchRepositoryItem',
                                event = main.SwitchRepository,
                                title = _(u'&Switch...')),
                        ]), # Menu RepositoryTestMenu
                    Menu.template('ShareTestMenu',
                        title = u'S&haring',
                        helpString = u'Sharing-related test commands',
                        childBlocks = [
                            MenuItem.template('ShowActivityViewerItem',
                                event = main.ShowActivityViewer,
                                title = u'Activity &Viewer',
                                helpString = u'Opens the Activity Viewer'),
                            MenuItem.template("AddSharingLogItem",
                                event = main.AddSharingLogToSidebar,
                                title = u"&Add sharing activity log to Sidebar",
                                helpString = u'Add sharing activity log to the Sidebar'),
                            MenuItem.template('ToolsShareSeparator1',
                                menuItemKind = 'Separator'),
                            MenuItem.template('EditMyNameItem',
                                event = main.EditMyName,
                                title = u'&Edit "Me" name',
                                helpString = u'Edit your name'),
                            MenuItem.template('MeAddressDebugItem',
                                event = main.ShowMeAddressCollectionDebugWindow,
                                title = u'Show "Me" Address &Collection',
                                helpString = u'Displays all active and old me addresses used to determine the fromMe and toMe attributes on Content Item'),
                            MenuItem.template('curentMeAddressesDebugItem',
                                event = main.ShowCurrentMeAddressesDebugWindow,
                                title = u'Show Current &Me Addresses',
                                helpString = u'Displays all active me addresses'),

                            MenuItem.template('curentMeAddressDebugItem',
                                event = main.ShowCurrentMeAddressDebugWindow,
                                title = u'&Show Current Me Address',
                                helpString = u'Displays the current me address'),

                            MenuItem.template('recalculateEmailAddressItem',
                                event = main.RecalculateMeAddresses,
                                title = u'&Recalculate Me Addresses',
                                helpString = u'Loops through the Incoming and Outgoing Accounts and rebuilds the me addresses current pointers'),
                            MenuItem.template('ToolsDebugSeparator4',
                                menuItemKind='Separator'),
                            MenuItem.template('BackgroundSyncAllItem',
                                event = main.BackgroundSyncAll,
                                title = u'Start a &background sync now',
                                helpString = u'Initiates a single background sync'),
                            MenuItem.template('BackgroundSyncGetOnlyItem',
                                event = main.BackgroundSyncGetOnly,
                                title = u'Start a &GET-only background sync of current collection',
                                helpString = u'Initiates a single background sync without writing to server'),
                            MenuItem.template('ToggleReadOnlyModeItem',
                                event = main.ToggleReadOnlyMode,
                                title = u'Read-onl&y sharing mode',
                                menuItemKind = 'Check',
                                helpString = u'Forces all sharing to be done in read-only mode'),
                            MenuItem.template("CalDAVAtopEIMItem",
                                event = main.CalDAVAtopEIM,
                                title = u"Enable CalDAV-atop-EIM",
                                helpString = u'Enable CalDAV-atop-EIM'),
                            MenuItem.template("RecordSetDebuggingItem",
                                event = main.RecordSetDebugging,
                                title = u"Enable RecordSet debugging",
                                helpString = u'Enable RecordSet debugging'),
                            MenuItem.template('CreateAConflict',
                                event = main.CreateConflict,
                                title = _(u"Create Conflict"),
                                helpString = _(u'Create an artificial conflict for the selected items')),
                            ]), # Menu ShareMenu
                    MenuItem.template('ToolsSeparator9',
                                menuItemKind = 'Separator'),
                    Menu.template('TestMenu',
                        title = u'&Test',
                        childBlocks = [
                            MenuItem.template('GenerateSomeDataItem',
                                event = main.GenerateContentItems,
                                title = u'&Generate Data',
                                helpString = u'generates a few items of each kind'),
                            MenuItem.template('GenerateMuchDataItem',
                                event = main.GenerateContentItems,
                                title = u'G&enerate Lots of Data',
                                helpString = u'generates many items of each kind'),
                            MenuItem.template('GenerateDataItemFromFile',
                                event = main.GenerateContentItemsFromFile,
                                title = u'Generate Items from a &file',
                                helpString = u'generates Items from a file'),
                            MenuItem.template('ToolsTestSeparator0',
                                menuItemKind='Separator'),
                            MenuItem.template('MimeTestItem',
                                event = main.MimeTest,
                                title = u'Load MIME &Torture Tests',
                                helpString = u'Loads real world complex / broken mime message examples provided by Anthony Baxter'),
                            MenuItem.template('i18nMailTestItem',
                                event = main.i18nMailTest,
                                title = u'Load i18n &Mail Tests',
                                helpString = u'Loads mail messages containing a variety of Charsets and Languages'),
                            ]),
                    Menu.template('DebugMenu',
                        title = u'&Debug',
                        childBlocks = [
                            MenuItem.template('ShowPyShellItem',
                                event = main.ShowPyShell,
                                title = u'&Show Python shell...',
                                helpString = u'Brings up an interactive Python shell'),
                            MenuItem.template('ShowPyCrustItem',
                                event = main.ShowPyCrust,
                                title = u'Show Python shell with &object browser...',
                                helpString = u'Brings up an interactive Python shell and object browser'),
                            MenuItem.template('ToolsDebugSeparator1',
                                menuItemKind='Separator'),
                            MenuItem.template('ReloadParcelsItem',
                                event = main.ReloadParcels,
                                title = u'Reload Par&cels',
                                accel = u'Ctrl+R',
                                helpString = u'Reloads any parcels that have been modified'),
                            MenuItem.template('ReloadStylesItem',
                                event = main.ReloadStyles,
                                title = u'Reload St&yles',
                                helpString = u'Reloads styles'),
                            MenuItem.template('ToolsDebugSeparator2',
                                menuItemKind='Separator'),
                            MenuItem.template('WxTestHarnessItem',
                                event = main.WxTestHarness,
                                title = u'&Wx Test Harness',
                                helpString = u'invoke the current flavor of wx debugging'),
                            MenuItem.template('ToolsDebugSeparator3',
                                menuItemKind='Separator'),
                            MenuItem.template('ShowI18nManagerDebugItem',
                                event = main.ShowI18nManagerDebugWindow,
                                title = _(u'Show I18nManager &debug window'),
                                helpString = _(u'Displays a tree of projects, locales, resources, and gettext localizations')),
                            MenuItem.template('ToolsDebugSeparator4',
                                menuItemKind='Separator'),
                            MenuItem.template('ShowBlockViewerItem',
                                event = main.ShowBlockViewer,
                                eventsForNamedLookup = [main.ShowBlockViewer],
                                title = _(u'Show &Block Viewer'),
                                helpString = _(u'Opens the Block Viewer')),
                            MenuItem.template('ShowRepositoryViewerItem',
                                event = main.ShowRepositoryViewer,
                                eventsForNamedLookup = [main.ShowRepositoryViewer],
                                title = _(u'Show &Repository Viewer'),
                                helpString = _(u'Opens the Repository Viewer')),
                            ]),
                    Menu.template('CPIAMenu',
                        title=u'CPI&A',
                        childBlocks = [
                            MenuItem.template("AddScriptsSetItem",
                                event = main.AddScriptsToSidebar,
                                title = u"Add CPIA Scripts to Sidebar",
                                helpString = u'Add Scripts to the Sidebar'),
                            MenuItem.template('RunSelectedScriptItem',
                                event = main.RunSelectedScript,
                                title = u'Run a CPIA Script',
                                accel = u'Ctrl+R',
                                helpString = u'Run the CPIA Script from the Detail View'),
                            MenuItem.template('ToolsCPIASeparator1',
                                menuItemKind='Separator'),
                            MenuItem.template('StartProfilerItem',
                                event = main.StartProfiler,
                                title = u'S&tart Event Profiler',
                                helpString = u'Start profiling CPIA events'),
                            MenuItem.template('StopProfilerItem',
                                event = main.StopProfiler,
                                title = u'St&op Event Profiler',
                                helpString = u'Stop CPIA Event Profiler'),
                            MenuItem.template('ToolsCPIASeparator2',
                                menuItemKind='Separator'),
                            MenuItem.template('ChandlerSkinMenuItem',
                                event = main.ChooseChandlerMainView,
                                title = u'&Chandler Skin',
                                menuItemKind = 'Check',
                                helpString = u'Switch to Chandler'),
                            MenuItem.template('CPIATestMenuItem',
                                event = main.ChooseCPIATestMainView,
                                title = u'C&PIA Test Skin',
                                menuItemKind = 'Check',
                                helpString = u'Switch to CPIA test'),
                            MenuItem.template('CPIATest2MenuItem',
                                event = main.ChooseCPIATest2MainView,
                                title = u'CPIA Test &2 Skin',
                                menuItemKind = 'Check',
                                helpString = u'Switch to CPIA test 2'),
                            ]), # Menu SkinsMenu
                    MenuItem.template('ToolsSeparator2',
                                menuItemKind='Separator'),
                    PluginMenu.template('PluginsMenu',
                        title=_(u'&Plugins'),
                        helpString=_(u'Manage Plugins'),
                        childBlocks = []),
                ]),
            Menu.template('HelpMenu',
                title = _(u'&Help'),
                childBlocks = [
                    MenuItem.template('AboutChandlerItem',
                        event = globalBlocks.About,
                        title = _(u'&About Chandler'),
                        helpString = _(u'About Chandler...'),
                        wxId = wx.ID_ABOUT),
                     MenuItem.template('HelpMenuItem',
                        event = globalBlocks.Help,
                        title = _(u'Chandler &FAQ'),
                        helpString =
                             _(u'Open Chandler FAQ in your web browser'),
                        accel = _(u'Ctrl+?')),
                     MenuItem.template('FileBugMenuItem',
                        event = globalBlocks.FileBug,
                        title = _(u'File a &bug'),
                        helpString =
                             _(u'Open instructions on how to file a bug')),
                    ]) # Menu HelpMenu
            ]).install (parcel) # MenuBar MenuBar

    Menu.template('SidebarContextMenu',
                title = _(u'Sidebar'),
                childBlocks = [
                    MenuItem.template('SidebarNewCollectionItem',
                        event = main.NewCollection,
                        title = _(u'&New Collection'),
                        helpString = _(u'Create a new Collection')),
                    MenuItem.template('SidebarSeparator1',
                        menuItemKind = 'Separator'),
                    MenuItem.template('SidebaRenameItem',
                        event = main.RenameCollection,
                        title = _(u'&Rename'),
                        helpString = _(u'Rename the selected collection')),
                    MenuItem.template('SidebaDuplicateItem',
                        event = main.DuplicateSidebarSelection,
                        title = _(u'Dup&licate'),
                        helpString = _(u'Duplicate the selected collection')),
                    MenuItem.template('SidebaDeleteItem',
                        event = main.DeleteCollection,
                        title = _(u'&Delete'),
                        helpString = _(u'Move the current selection to the trash')),
                    MenuItem.template('SidebaEmptyTrashItem',
                        event = main.EmptyTrash,
                        title = _(u'&Empty Trash'),
                        helpString = _(u'Remove all items from the Trash collection')),
                    MenuItem.template('SidebarSeparator2',
                        menuItemKind = 'Separator'),
                    Menu.template('SidebaCollectionColorMenu',
                        title = _(u'&Collection Color'),
                        childBlocks = makeColorMenuItems(parcel,
                                                            MenuItem,
                                                            usercollections.collectionHues,
                                                            "Sidebar")),
                    MenuItem.template('SidebarSeparator3',
                        menuItemKind = 'Separator'),
                    MenuItem.template('SidebarToggleMineItem',
                        event = main.ToggleMine,
                        title = _(u'Toggle mine/not-mine'),
                        helpString = _(u'Toggle mine/not-mine')),
                    MenuItem.template('SidebarSeparator4',
                        menuItemKind = 'Separator'),
                    MenuItem.template('SidebarSyncCollectionItem',
                        event = main.SyncCollection,
                        title = _(u'S&ync'),
                        helpString = _(u"Synchronize a shared collection")),
                    MenuItem.template('SidebarTakeOnlineOfflineItem',
                        event = main.TakeOnlineOffline,
                        menuItemKind = 'Check',
                        title = _(u'Suspend syncin&g'),
                        helpString = _(u"Toggle the collection's online status")),
                    MenuItem.template('SidebarSubscribeToCollectionItem',
                        event = main.SubscribeToCollection,
                        title = _(u'&Subscribe...'),
                        helpString = _(u'Subscribe to a published collection')),
                    MenuItem.template('SidebarUnsubscribeCollectionItem',
                        event = main.UnsubscribeCollection,
                        title = _(u'&Unsubscribe'),
                        helpString = _(u'Stop sharing the selected collection')),
                    MenuItem.template('SidebarPublishCollectionItem',
                        event = main.PublishCollection,
                        title = _(u'&Publish...'),
                        helpString = _(u'Share the selected collection')),
                    MenuItem.template('SidebarUnpublishCollectionItem',
                        event = main.UnpublishCollection,
                        title = _(u'U&npublish'),
                        helpString = _(u'Stop sharing the selected collection')),
                    MenuItem.template('SidebarManageSidebarCollectionItem',
                        event = main.ManageSidebarCollection,
                        title = _(u'&Manage...'),
                        helpString = _(u'Manage the selected collection')),
                    MenuItem.template('SidebarCopyCollectionURLItem',
                        event = main.CopyCollectionURL,
                        title = _(u'&Copy ticket URLs to clipboard'),
                        helpString = _(u"Copy the selected collection's URL(s) to the clipboard")),
                    ]).install(parcel)

    Menu.template('ItemContextMenu',
                title = _(u'Item'),
                childBlocks = [
                    Menu.template('ItemContextNewItemMenu',
                        title = _(u'&New'),
                        helpString = _(u'Create a new Content Item'),
                        childBlocks = [
                            MenuItem.template('ItemContextNewNoteItem',
                                event = main.NewNote,
                                title = _(u'&Note'),
                                accel = _(u'Ctrl+Shift+N'),
                                helpString = _(u'Create a new Note')),
                            MenuItem.template('ItemContextNewMessageItem',
                                event = main.NewMailMessage,
                                title = _(u'&Message'),
                                accel = _(u'Ctrl+Shift+M'),
                                helpString = _(u'Create a new Message')),
                            MenuItem.template('ItemContextNewTaskItem',
                                event = main.NewTask,
                                title = _(u'&Task'),
                                accel = _(u'Ctrl+Shift+T'),
                                helpString = _(u'Create a new Task')),
                            MenuItem.template('ItemContextNewEventItem',
                                event = main.NewCalendar,
                                title = _(u'&Event'),
                                accel = _(u'Ctrl+Shift+E'),
                                helpString = _(u'Create a new Event')),
                            ]),
                    MenuItem.template('ItemContextCutItem',
                        event = main.CutInActiveView,
                        title = messages.CUT),
                    MenuItem.template('ItemContextCopyItem',
                        event = main.CopyInActiveView,
                        title = messages.COPY),
                    MenuItem.template('ItemContextDuplicateItem',
                        event = main.DuplicateInActiveView,
                        title = _(u'Dup&licate'),
                        helpString = _(u'Duplicate the selected item in the summary view')),
                    MenuItem.template('ItemContextPasteItem',
                        event = main.PasteInActiveView,
                        title = messages.PASTE),
                    MenuItem.template('ItemContextRemoveItem',
                        event = main.RemoveInActiveView,
                        title = _(u'Remo&ve'),
                        accel = platform_remove,
                        helpString = _(u'Remove the selected items in the summary view')),                    
                    MenuItem.template('ItemContextDeleteItem',
                        event = main.DeleteInActiveView,
                        title = _(u'&Delete'),
                        accel = platform_delete,                        
                        helpString = _(u'Move the selected item in the summary view to the trash')),
                    MenuItem.template('ItemContextSeparator1',
                        menuItemKind = 'Separator'),
                    MenuItem.template('ItemContextStampMessageItem',
                        event = main.FocusStampMessage,
                        title = _(u"&Address item"),
                        toggleTitle = _(u"Remove &addresses"),
                        helpString = messages.STAMP_MAIL_HELP),
                    MenuItem.template('ItemContextStampTaskItem',
                        event = main.FocusStampTask,
                        title = _(u"Add to &Task list"),
                        toggleTitle = _(u"Remove from &Task list"),
                        helpString = messages.STAMP_TASK_HELP),
                    MenuItem.template('ItemContextStampEventItem',
                        event = main.FocusStampCalendar,
                        title = _(u"Add to &Calendar"),
                        toggleTitle = _(u"Remove from &Calendar"),
                        helpString = messages.STAMP_CALENDAR_HELP),
                    MenuItem.template('ItemContextSeparator2',
                        menuItemKind = 'Separator'),
                    MenuItem.template('ItemContextReplyMessageItem',
                        event = main.ReplyMessage,
                        title = _('&Reply'),
                        helpString = _(u'Reply help message')),
                    MenuItem.template('ItemContextReplyAllMessageItem',
                        event = main.ReplyAllMessage,
                        title = _('Repl&yAll'),
                        helpString = _(u'Reply all help message')),
                    MenuItem.template('ItemContextForwardMessageItem',
                        event = main.ForwardMessage,
                        title = _('For&ward'),
                        helpString = _(u'Forward help message')),
                    MenuItem.template('ItemContextSeparator3',
                        menuItemKind = 'Separator'),
                    MenuItem.template('ItemContextNeverShareItem',
                        event = main.FocusTogglePrivate,
                        title = _(u"Never s&hare this item"),
                        menuItemKind = 'Check',
                        helpString = _(u'Mark the selected item in the summary view as private, so it will not be shared')),
                    ]).install(parcel)
