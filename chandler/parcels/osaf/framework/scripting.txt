----------------------------------------
Scripting Chandler using CPIA Script
----------------------------------------


Creating and Running Scripts using CPIA Script
==============================================

The ``osaf.framework.scripting`` module provides an API for running python-based
scripts within Chandler.  There's a Script Kind that persistently stores
scripts as a flavor of ContentItem, and a few functions to make it easy
to run scripts.

You can easily create and run a script through the run_script API::

    >>> import osaf.framework.scripting as Scripting
    >>> result = Scripting.run_script("print 3*4;")
    12

For debugging purposes you can pass a fileName parameter, so errors can 
be reported in the correct file::

    >>> result = Scripting.run_script("print 3*4;", fileName=u"Calculator.py")
    12

For many of our examples, we'll need a view.  We'll be using a null
repository view, ``rv``::

    >>> from repository.persistence.RepositoryView import NullRepositoryView
    >>> rv = NullRepositoryView()

Use hotkey_script to run a script in response to a function key pressed.
Normally the event would come in to your key event handler.  For testing
purposes, we'll just create a key event.  Only F-keys can be hot keys.
If a script is found whose fkey attribute is "Fx" where x is the
number of the F-key pressed, True will be returned, and the script will be
executed.  Otherwise False is returned and your event handler should
call the event's Skip() method to keep looking for a handler::

    >>> import wx
    >>> event = wx.KeyEvent() 
    >>> print Scripting.hotkey_script(event, view=rv)
    False

There is an APIs to run scripts based on options passed in to Chandler
on the command line.  It checks the global options for a script to run.
There's also an option to run the test scripts at Chandler 
startup.  The test scripts any script that has True in its "test" attribute.
Some day we'll launch Chandler here, so we can test these features.


script_file function
--------------------
The script_file function makes it easy to read in the text of a script
from a file.  This doesn't actually do anything script-specific, so
it can go away once there's an equivalent facility elsewhere in our
utilities.  It uses an optional sibling parameter to make it easy
to pass in a complete path, using __file__, and then read the
sibling from the same directory the sibling is in.  We use this
to bring scripts in to our application from the "scripts" directory::

    >>> import osaf.app.scripts as Scripts
    >>> script_text = Scripting.script_file(u"NewScript.py", Scripts.__file__)
    >>> "Script" in script_text
    True
    
Script Kind
-----------
Most of the API goes through the Script Kind.  You can create scripts
by passing in a bodyString for the script, and then calling execute()::

    >>> myScript = Scripting.Script(view=rv, bodyString="t = 'New Task'; print t")
    >>> myScript.execute()
    New Task

Without the application around we can't actually make our scripts do very much.

Lets check that the script object we created has attributes like we'd expect.
We initialize scripts without any name to Untitled::

    >>> myScript.displayName
    u'Untitled'

Like any repository Item, you can name the script using the name parameter
if you want to give it a unique name::

    >>> namedScript = Scripting.Script(view=rv, name=u"Empty")
    >>> namedScript.itsName
    u'Empty'

This also becomes its displayName::

    >>> namedScript.displayName
    u'Empty'

Or you can just pass in none to get an untitled Script.

    >>> unnamedScript = Scripting.Script(view=rv)
    >>> unnamedScript.displayName
    u'Untitled'

Scripts keep track of the last time they ran.  This is used for date redirection::

    >>> myScript.lastRan == myScript.date
    True

The lastRan attribute is updated when you execute() your script::

    >>> from datetime import datetime 
    >>> beforeExecute = datetime.now()
    >>> myScript.lastRan <= beforeExecute
    True

Updated when you execute() them::

    >>> myScript.execute()
    New Task
    >>> myScript.lastRan < beforeExecute
    False

The lastRan attribute is a datetime value::
    >>> myScript.lastRan
    datetime.datetime(20...)

WRITING SCRIPTS
===============
Sometimes the complications of an implementation show up in the API.  Hopefully
these complications will be hidden over time, and a simple API will emerge.
The work done here can be considered a proposal for how that simplification could be done.
I have built a subset of that simple API using "proxy" objects.  These objects
present the simple API, and anything beyond that gets passed on to the real
implementation for that object.

The "app namespace" proxy provides access to key application objects.
You can call app_ns() with no view parameter and it will default to the view
used by the Chandler UI. We'll use the Null Repository view for these tests.

Use the app_ns() function to get a proxy to the osaf.app namespace.  This object
has all the major Blocks in Chandler available as attributes.  So if you want to
get the sidebar you can say::

    >>> app_ns = Scripting.app_ns(rv)
    >>> app_ns.summary
    <...scripting.BlockProxy object at ...>

This BlockProxy object can be used in place of the real summary view.  But it has
the advantage of always pointing you to the actual summary view that is currently
rendered.

Proxy blocks available include the sidebar, calendar, detail, appbar, markupbar::

    >>> app_ns.sidebar
    <...scripting.BlockProxy object at ...>
    >>> app_ns.calendar
    <...scripting.BlockProxy object at ...>
    >>> app_ns.detail
    <...scripting.BlockProxy object at ...>
    >>> app_ns.appbar
    <...scripting.BlockProxy object at ...>
    >>> app_ns.markupbar
    <...scripting.BlockProxy object at ...>

There's also a root proxy for the Main View Root block.  The proxy for this block 
also takes on the role of dispatching Chandler events used in Scripting.

    >>> app_ns.root
    <...scripting.RootProxy object at ...>

If you want pass "commands" to Chandler, you essentially call methods on the
root proxy to do this.

    >>> app_ns.root.Quit()
    Traceback (most recent call last):
    ...
    AttributeError: ...

When Chandler's running no exception will be raised, the application will Quit.
This gives an error because Chandler's not running, so there is no rendered
main view.

Event Timing
------------
The root proxy has an attribute named "timing" that keeps track of the times taken
by CPIA events when they are posted.  It uses a class called EventTiming,
which is a simple subclass of dict.  

Since we can't post events now, it's empty::

    >>> app_ns.root.timing
    {}

It's organized as a dictionary whose keys are the event names, and whose
values are the list of times taken for each event in dateTimeDelta format.
You can get the timings as strings so you can more easily read them::

    >>> app_ns.root.timing.strings
    {}

Use the dict method clear() to clear the values::

    >>> app_ns.root.timing.clear()
    
USER EMULATION
--------------
There are functions that emulate user actions, for testing purposes.
They include simulating a mouse click, typing a string of characters,
and hitting the return key.


